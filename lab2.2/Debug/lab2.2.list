
lab2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a68  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005c40  08005c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c50  08005c50  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08005c50  08005c50  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c50  08005c50  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08005c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000030  08005c88  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08005c88  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010040  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002136  00000000  00000000  000300e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  00032220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d03  00000000  00000000  00033300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bd9  00000000  00000000  00034003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011800  00000000  00000000  0005abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108363  00000000  00000000  0006c3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049b4  00000000  00000000  00174740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001790f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005c28 	.word	0x08005c28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	08005c28 	.word	0x08005c28

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f000 fc8b 	bl	8001372 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 f84c 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a60:	f000 f9e8 	bl	8000e34 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a64:	f000 f990 	bl	8000d88 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000a68:	f000 f892 	bl	8000b90 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a6c:	f000 f908 	bl	8000c80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000a70:	213c      	movs	r1, #60	; 0x3c
 8000a72:	481c      	ldr	r0, [pc, #112]	; (8000ae4 <main+0x90>)
 8000a74:	f004 f8be 	bl	8004bf4 <HAL_TIM_Encoder_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a78:	217f      	movs	r1, #127	; 0x7f
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <main+0x94>)
 8000a7c:	f002 f990 	bl	8002da0 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim2);
 8000a80:	481a      	ldr	r0, [pc, #104]	; (8000aec <main+0x98>)
 8000a82:	f003 fe2d 	bl	80046e0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a86:	2100      	movs	r1, #0
 8000a88:	4818      	ldr	r0, [pc, #96]	; (8000aec <main+0x98>)
 8000a8a:	f003 fefb 	bl	8004884 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4816      	ldr	r0, [pc, #88]	; (8000aec <main+0x98>)
 8000a92:	f003 fef7 	bl	8004884 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <main+0x90>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <main+0x9c>)
 8000a9e:	6013      	str	r3, [r2, #0]
	  angularposition();
 8000aa0:	f000 fa74 	bl	8000f8c <angularposition>
	  ADC_Read_blocking();
 8000aa4:	f000 fa9a 	bl	8000fdc <ADC_Read_blocking>
	  Setpoint();
 8000aa8:	f000 fa46 	bl	8000f38 <Setpoint>
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab0:	4810      	ldr	r0, [pc, #64]	; (8000af4 <main+0xa0>)
 8000ab2:	f002 fd71 	bl	8003598 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d009      	beq.n	8000ad0 <main+0x7c>
	  {
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <main+0x98>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 15000);
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <main+0x98>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
 8000ace:	e7e2      	b.n	8000a96 <main+0x42>
	  }
	  else
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 15000);
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <main+0x98>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
		  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <main+0x98>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	639a      	str	r2, [r3, #56]	; 0x38
  {
 8000ae2:	e7d8      	b.n	8000a96 <main+0x42>
 8000ae4:	20000104 	.word	0x20000104
 8000ae8:	2000004c 	.word	0x2000004c
 8000aec:	200000b8 	.word	0x200000b8
 8000af0:	20000150 	.word	0x20000150
 8000af4:	48000800 	.word	0x48000800

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0318 	add.w	r3, r7, #24
 8000b02:	2238      	movs	r2, #56	; 0x38
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f005 f862 	bl	8005bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f002 fd90 	bl	8003640 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b32:	2302      	movs	r3, #2
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b36:	2304      	movs	r3, #4
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b3a:	2355      	movs	r3, #85	; 0x55
 8000b3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fe2a 	bl	80037a8 <HAL_RCC_OscConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b5a:	f000 fa89 	bl	8001070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5e:	230f      	movs	r3, #15
 8000b60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b62:	2303      	movs	r3, #3
 8000b64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2104      	movs	r1, #4
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 f928 	bl	8003dcc <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b82:	f000 fa75 	bl	8001070 <Error_Handler>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3750      	adds	r7, #80	; 0x50
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f005 f811 	bl	8005bd0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd6:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bd8:	2204      	movs	r2, #4
 8000bda:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c18:	4817      	ldr	r0, [pc, #92]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000c1a:	f000 fe95 	bl	8001948 <HAL_ADC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c24:	f000 fa24 	bl	8001070 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4811      	ldr	r0, [pc, #68]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000c34:	f002 f916 	bl	8002e64 <HAL_ADCEx_MultiModeConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c3e:	f000 fa17 	bl	8001070 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_ADC1_Init+0xec>)
 8000c44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c46:	2306      	movs	r3, #6
 8000c48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c4e:	237f      	movs	r3, #127	; 0x7f
 8000c50:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c52:	2304      	movs	r3, #4
 8000c54:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_ADC1_Init+0xe8>)
 8000c60:	f001 fa5a 	bl	8002118 <HAL_ADC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c6a:	f000 fa01 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	3730      	adds	r7, #48	; 0x30
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000004c 	.word	0x2000004c
 8000c7c:	04300002 	.word	0x04300002

08000c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	; 0x38
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
 8000cae:	615a      	str	r2, [r3, #20]
 8000cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cb2:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000cbc:	22a9      	movs	r2, #169	; 0xa9
 8000cbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000cc8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ccc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cda:	482a      	ldr	r0, [pc, #168]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000cdc:	f003 fca8 	bl	8004630 <HAL_TIM_Base_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ce6:	f000 f9c3 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4823      	ldr	r0, [pc, #140]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000cf8:	f004 f91e 	bl	8004f38 <HAL_TIM_ConfigClockSource>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d02:	f000 f9b5 	bl	8001070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d06:	481f      	ldr	r0, [pc, #124]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000d08:	f003 fd5a 	bl	80047c0 <HAL_TIM_PWM_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d12:	f000 f9ad 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4817      	ldr	r0, [pc, #92]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000d26:	f004 febd 	bl	8005aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d30:	f000 f99e 	bl	8001070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d34:	2360      	movs	r3, #96	; 0x60
 8000d36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000d38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000d4e:	f003 ffdf 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d58:	f000 f98a 	bl	8001070 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d60:	463b      	mov	r3, r7
 8000d62:	2204      	movs	r2, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000d68:	f003 ffd2 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000d72:	f000 f97d 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <MX_TIM2_Init+0x104>)
 8000d78:	f000 fa58 	bl	800122c <HAL_TIM_MspPostInit>

}
 8000d7c:	bf00      	nop
 8000d7e:	3738      	adds	r7, #56	; 0x38
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200000b8 	.word	0x200000b8

08000d88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	2224      	movs	r2, #36	; 0x24
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 ff1a 	bl	8005bd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <MX_TIM3_Init+0xa4>)
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <MX_TIM3_Init+0xa8>)
 8000daa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_TIM3_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_TIM3_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_TIM3_Init+0xa4>)
 8000dba:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000dbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_TIM3_Init+0xa4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_TIM3_Init+0xa4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000de4:	2301      	movs	r3, #1
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_TIM3_Init+0xa4>)
 8000df8:	f003 fe56 	bl	8004aa8 <HAL_TIM_Encoder_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e02:	f000 f935 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_TIM3_Init+0xa4>)
 8000e14:	f004 fe46 	bl	8005aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e1e:	f000 f927 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	3730      	adds	r7, #48	; 0x30
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000104 	.word	0x20000104
 8000e30:	40000400 	.word	0x40000400

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a37      	ldr	r2, [pc, #220]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e62:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a31      	ldr	r2, [pc, #196]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a2b      	ldr	r2, [pc, #172]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2120      	movs	r1, #32
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f002 fb89 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4818      	ldr	r0, [pc, #96]	; (8000f30 <MX_GPIO_Init+0xfc>)
 8000ece:	f002 f9e1 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f002 f9d0 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f002 f9c1 	bl	8003294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2028      	movs	r0, #40	; 0x28
 8000f18:	f002 f987 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f1c:	2028      	movs	r0, #40	; 0x28
 8000f1e:	f002 f99e 	bl	800325e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000800 	.word	0x48000800
 8000f34:	00000000 	.word	0x00000000

08000f38 <Setpoint>:

/* USER CODE BEGIN 4 */
void Setpoint()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	MotorSetpoint= (ADC1_Channel[0].data/4095.0)*360;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <Setpoint+0x48>)
 8000f3e:	8c1b      	ldrh	r3, [r3, #32]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fabb 	bl	80004bc <__aeabi_i2d>
 8000f46:	a30c      	add	r3, pc, #48	; (adr r3, 8000f78 <Setpoint+0x40>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff fc4a 	bl	80007e4 <__aeabi_ddiv>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <Setpoint+0x4c>)
 8000f5e:	f7ff fb17 	bl	8000590 <__aeabi_dmul>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f7ff fd23 	bl	80009b4 <__aeabi_d2f>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <Setpoint+0x50>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	40affe00 	.word	0x40affe00
 8000f80:	20000000 	.word	0x20000000
 8000f84:	40768000 	.word	0x40768000
 8000f88:	20000158 	.word	0x20000158

08000f8c <angularposition>:



void angularposition()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	Angular=(QEIReadRaw/3072.0)*360.0;
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <angularposition+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fa81 	bl	800049c <__aeabi_ui2d>
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <angularposition+0x44>)
 8000fa0:	f7ff fc20 	bl	80007e4 <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <angularposition+0x48>)
 8000fb2:	f7ff faed 	bl	8000590 <__aeabi_dmul>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fcf9 	bl	80009b4 <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <angularposition+0x4c>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000150 	.word	0x20000150
 8000fd0:	40a80000 	.word	0x40a80000
 8000fd4:	40768000 	.word	0x40768000
 8000fd8:	20000154 	.word	0x20000154

08000fdc <ADC_Read_blocking>:

void ADC_Read_blocking()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
static uint32_t TimeStamp = 0;
if( HAL_GetTick()<TimeStamp) return;
 8000fe2:	f000 fa2b 	bl	800143c <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <ADC_Read_blocking+0x88>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d334      	bcc.n	800105a <ADC_Read_blocking+0x7e>
TimeStamp = HAL_GetTick()+500;
 8000ff0:	f000 fa24 	bl	800143c <HAL_GetTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ffa:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <ADC_Read_blocking+0x88>)
 8000ffc:	6013      	str	r3, [r2, #0]
for(int i=0;i<1;i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	e026      	b.n	8001052 <ADC_Read_blocking+0x76>
{
HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[i].Config);
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <ADC_Read_blocking+0x8c>)
 8001010:	4413      	add	r3, r2
 8001012:	4619      	mov	r1, r3
 8001014:	4815      	ldr	r0, [pc, #84]	; (800106c <ADC_Read_blocking+0x90>)
 8001016:	f001 f87f 	bl	8002118 <HAL_ADC_ConfigChannel>
HAL_ADC_Start(&hadc1);
 800101a:	4814      	ldr	r0, [pc, #80]	; (800106c <ADC_Read_blocking+0x90>)
 800101c:	f000 fe50 	bl	8001cc0 <HAL_ADC_Start>
HAL_ADC_PollForConversion(&hadc1, 100);
 8001020:	2164      	movs	r1, #100	; 0x64
 8001022:	4812      	ldr	r0, [pc, #72]	; (800106c <ADC_Read_blocking+0x90>)
 8001024:	f000 ff64 	bl	8001ef0 <HAL_ADC_PollForConversion>
ADC1_Channel[i].data = HAL_ADC_GetValue(&hadc1);
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <ADC_Read_blocking+0x90>)
 800102a:	f001 f867 	bl	80020fc <HAL_ADC_GetValue>
 800102e:	4603      	mov	r3, r0
 8001030:	b298      	uxth	r0, r3
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <ADC_Read_blocking+0x8c>)
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3320      	adds	r3, #32
 8001042:	4602      	mov	r2, r0
 8001044:	801a      	strh	r2, [r3, #0]
HAL_ADC_Stop(&hadc1);
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <ADC_Read_blocking+0x90>)
 8001048:	f000 ff1e 	bl	8001e88 <HAL_ADC_Stop>
for(int i=0;i<1;i++)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	ddd5      	ble.n	8001004 <ADC_Read_blocking+0x28>
 8001058:	e000      	b.n	800105c <ADC_Read_blocking+0x80>
if( HAL_GetTick()<TimeStamp) return;
 800105a:	bf00      	nop
}
}
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000015c 	.word	0x2000015c
 8001068:	20000000 	.word	0x20000000
 800106c:	2000004c 	.word	0x2000004c

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_MspInit+0x44>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <HAL_MspInit+0x44>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6613      	str	r3, [r2, #96]	; 0x60
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_MspInit+0x44>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_MspInit+0x44>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_MspInit+0x44>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6593      	str	r3, [r2, #88]	; 0x58
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x44>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010b2:	f002 fb69 	bl	8003788 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b09e      	sub	sp, #120	; 0x78
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	2254      	movs	r2, #84	; 0x54
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f004 fd73 	bl	8005bd0 <memset>
  if(hadc->Instance==ADC1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010f2:	d134      	bne.n	800115e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010fe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4618      	mov	r0, r3
 8001106:	f003 f845 	bl	8004194 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001110:	f7ff ffae 	bl	8001070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_ADC_MspInit+0xa4>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_ADC_MspInit+0xa4>)
 800111a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800111e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_ADC_MspInit+0xa4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_ADC_MspInit+0xa4>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_ADC_MspInit+0xa4>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_ADC_MspInit+0xa4>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001144:	2301      	movs	r3, #1
 8001146:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001148:	2303      	movs	r3, #3
 800114a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001154:	4619      	mov	r1, r3
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f002 f89b 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3778      	adds	r7, #120	; 0x78
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800117c:	d10b      	bne.n	8001196 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_TIM_Base_MspInit+0x38>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_TIM_Base_MspInit+0x38>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6593      	str	r3, [r2, #88]	; 0x58
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_TIM_Base_MspInit+0x38>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_TIM_Encoder_MspInit+0x7c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d128      	bne.n	800121c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_TIM_Encoder_MspInit+0x80>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <HAL_TIM_Encoder_MspInit+0x80>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_TIM_Encoder_MspInit+0x80>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_TIM_Encoder_MspInit+0x80>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_TIM_Encoder_MspInit+0x80>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_TIM_Encoder_MspInit+0x80>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011fa:	23c0      	movs	r3, #192	; 0xc0
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800120a:	2302      	movs	r3, #2
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f002 f83c 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40000400 	.word	0x40000400
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800124c:	d11d      	bne.n	800128a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_TIM_MspPostInit+0x68>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_TIM_MspPostInit+0x68>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_TIM_MspPostInit+0x68>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001266:	f248 0302 	movw	r3, #32770	; 0x8002
 800126a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001278:	2301      	movs	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4619      	mov	r1, r3
 8001282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001286:	f002 f805 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x4>

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 f898 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012f4:	f002 f980 	bl	80035f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001322:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001324:	f7ff ffea 	bl	80012fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <LoopForever+0x6>)
  ldr r1, =_edata
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <LoopForever+0xe>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001340:	4c0a      	ldr	r4, [pc, #40]	; (800136c <LoopForever+0x16>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134e:	f004 fc47 	bl	8005be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001352:	f7ff fb7f 	bl	8000a54 <main>

08001356 <LoopForever>:

LoopForever:
    b LoopForever
 8001356:	e7fe      	b.n	8001356 <LoopForever>
  ldr   r0, =_estack
 8001358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001364:	08005c58 	.word	0x08005c58
  ldr r2, =_sbss
 8001368:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800136c:	20000164 	.word	0x20000164

08001370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC1_2_IRQHandler>

08001372 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f001 ff49 	bl	8003214 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001382:	2000      	movs	r0, #0
 8001384:	f000 f80e 	bl	80013a4 <HAL_InitTick>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	e001      	b.n	8001398 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001394:	f7ff fe72 	bl	800107c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001398:	79fb      	ldrb	r3, [r7, #7]

}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_InitTick+0x68>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_InitTick+0x6c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_InitTick+0x68>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 ff54 	bl	800327a <HAL_SYSTICK_Config>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10f      	bne.n	80013f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	d809      	bhi.n	80013f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013de:	2200      	movs	r2, #0
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	f04f 30ff 	mov.w	r0, #4294967295
 80013e6:	f001 ff20 	bl	800322a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_InitTick+0x70>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e007      	b.n	8001402 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e004      	b.n	8001402 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e001      	b.n	8001402 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000002c 	.word	0x2000002c
 8001410:	20000024 	.word	0x20000024
 8001414:	20000028 	.word	0x20000028

08001418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_IncTick+0x1c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x20>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4413      	add	r3, r2
 8001426:	4a03      	ldr	r2, [pc, #12]	; (8001434 <HAL_IncTick+0x1c>)
 8001428:	6013      	str	r3, [r2, #0]
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	20000160 	.word	0x20000160
 8001438:	2000002c 	.word	0x2000002c

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000160 	.word	0x20000160

08001454 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	609a      	str	r2, [r3, #8]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3360      	adds	r3, #96	; 0x60
 80014ce:	461a      	mov	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <LL_ADC_SetOffset+0x44>)
 80014de:	4013      	ands	r3, r2
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	4313      	orrs	r3, r2
 80014ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014f4:	bf00      	nop
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	03fff000 	.word	0x03fff000

08001504 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3360      	adds	r3, #96	; 0x60
 8001512:	461a      	mov	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3360      	adds	r3, #96	; 0x60
 8001540:	461a      	mov	r2, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800155a:	bf00      	nop
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001566:	b480      	push	{r7}
 8001568:	b087      	sub	sp, #28
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3360      	adds	r3, #96	; 0x60
 8001576:	461a      	mov	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	431a      	orrs	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001590:	bf00      	nop
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3360      	adds	r3, #96	; 0x60
 80015ac:	461a      	mov	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	615a      	str	r2, [r3, #20]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800161e:	b480      	push	{r7}
 8001620:	b087      	sub	sp, #28
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3330      	adds	r3, #48	; 0x30
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	4413      	add	r3, r2
 800163c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	211f      	movs	r1, #31
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	401a      	ands	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0e9b      	lsrs	r3, r3, #26
 8001656:	f003 011f 	and.w	r1, r3, #31
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	431a      	orrs	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001676:	b480      	push	{r7}
 8001678:	b087      	sub	sp, #28
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3314      	adds	r3, #20
 8001686:	461a      	mov	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	0e5b      	lsrs	r3, r3, #25
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	0d1b      	lsrs	r3, r3, #20
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2107      	movs	r1, #7
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	401a      	ands	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	0d1b      	lsrs	r3, r3, #20
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	431a      	orrs	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016c0:	bf00      	nop
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0318 	and.w	r3, r3, #24
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016f0:	40d9      	lsrs	r1, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	400b      	ands	r3, r1
 80016f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fa:	431a      	orrs	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	0007ffff 	.word	0x0007ffff

08001714 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 031f 	and.w	r3, r3, #31
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800175c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6093      	str	r3, [r2, #8]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001784:	d101      	bne.n	800178a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017d4:	d101      	bne.n	80017da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017fc:	f043 0201 	orr.w	r2, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001824:	f043 0202 	orr.w	r2, r3, #2
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <LL_ADC_IsEnabled+0x18>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <LL_ADC_IsEnabled+0x1a>
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b02      	cmp	r3, #2
 8001870:	d101      	bne.n	8001876 <LL_ADC_IsDisableOngoing+0x18>
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <LL_ADC_IsDisableOngoing+0x1a>
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001894:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001898:	f043 0204 	orr.w	r2, r3, #4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018c0:	f043 0210 	orr.w	r2, r3, #16
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d101      	bne.n	80018ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800190a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800190e:	f043 0220 	orr.w	r2, r3, #32
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b08      	cmp	r3, #8
 8001934:	d101      	bne.n	800193a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1a9      	b.n	8001cb6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d109      	bne.n	8001984 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fba7 	bl	80010c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fef1 	bl	8001770 <LL_ADC_IsDeepPowerDownEnabled>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d004      	beq.n	800199e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fed7 	bl	800174c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff0c 	bl	80017c0 <LL_ADC_IsInternalRegulatorEnabled>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d115      	bne.n	80019da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fef0 	bl	8001798 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019b8:	4b9c      	ldr	r3, [pc, #624]	; (8001c2c <HAL_ADC_Init+0x2e4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	099b      	lsrs	r3, r3, #6
 80019be:	4a9c      	ldr	r2, [pc, #624]	; (8001c30 <HAL_ADC_Init+0x2e8>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	099b      	lsrs	r3, r3, #6
 80019c6:	3301      	adds	r3, #1
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff feee 	bl	80017c0 <LL_ADC_IsInternalRegulatorEnabled>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10d      	bne.n	8001a06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	f043 0210 	orr.w	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff62 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 8001a10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 8142 	bne.w	8001ca4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 813e 	bne.w	8001ca4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a30:	f043 0202 	orr.w	r2, r3, #2
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fefb 	bl	8001838 <LL_ADC_IsEnabled>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d141      	bne.n	8001acc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a50:	d004      	beq.n	8001a5c <HAL_ADC_Init+0x114>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a77      	ldr	r2, [pc, #476]	; (8001c34 <HAL_ADC_Init+0x2ec>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d10f      	bne.n	8001a7c <HAL_ADC_Init+0x134>
 8001a5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a60:	f7ff feea 	bl	8001838 <LL_ADC_IsEnabled>
 8001a64:	4604      	mov	r4, r0
 8001a66:	4873      	ldr	r0, [pc, #460]	; (8001c34 <HAL_ADC_Init+0x2ec>)
 8001a68:	f7ff fee6 	bl	8001838 <LL_ADC_IsEnabled>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4323      	orrs	r3, r4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e012      	b.n	8001aa2 <HAL_ADC_Init+0x15a>
 8001a7c:	486e      	ldr	r0, [pc, #440]	; (8001c38 <HAL_ADC_Init+0x2f0>)
 8001a7e:	f7ff fedb 	bl	8001838 <LL_ADC_IsEnabled>
 8001a82:	4604      	mov	r4, r0
 8001a84:	486d      	ldr	r0, [pc, #436]	; (8001c3c <HAL_ADC_Init+0x2f4>)
 8001a86:	f7ff fed7 	bl	8001838 <LL_ADC_IsEnabled>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	431c      	orrs	r4, r3
 8001a8e:	486c      	ldr	r0, [pc, #432]	; (8001c40 <HAL_ADC_Init+0x2f8>)
 8001a90:	f7ff fed2 	bl	8001838 <LL_ADC_IsEnabled>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4323      	orrs	r3, r4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d012      	beq.n	8001acc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Init+0x172>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a5f      	ldr	r2, [pc, #380]	; (8001c34 <HAL_ADC_Init+0x2ec>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_Init+0x176>
 8001aba:	4a62      	ldr	r2, [pc, #392]	; (8001c44 <HAL_ADC_Init+0x2fc>)
 8001abc:	e000      	b.n	8001ac0 <HAL_ADC_Init+0x178>
 8001abe:	4a62      	ldr	r2, [pc, #392]	; (8001c48 <HAL_ADC_Init+0x300>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f7ff fcc4 	bl	8001454 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7f5b      	ldrb	r3, [r3, #29]
 8001ad0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001adc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ae2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d106      	bne.n	8001b08 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	3b01      	subs	r3, #1
 8001b00:	045b      	lsls	r3, r3, #17
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d009      	beq.n	8001b24 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <HAL_ADC_Init+0x304>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	69b9      	ldr	r1, [r7, #24]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fee5 	bl	8001922 <LL_ADC_INJ_IsConversionOngoing>
 8001b58:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d17f      	bne.n	8001c60 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d17c      	bne.n	8001c60 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b6a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b72:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b82:	f023 0302 	bic.w	r3, r3, #2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d017      	beq.n	8001bc8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ba6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bb0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6911      	ldr	r1, [r2, #16]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001bc6:	e013      	b.n	8001bf0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d12a      	bne.n	8001c50 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c10:	4311      	orrs	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c16:	4311      	orrs	r1, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	e019      	b.n	8001c60 <HAL_ADC_Init+0x318>
 8001c2c:	20000024 	.word	0x20000024
 8001c30:	053e2d63 	.word	0x053e2d63
 8001c34:	50000100 	.word	0x50000100
 8001c38:	50000400 	.word	0x50000400
 8001c3c:	50000500 	.word	0x50000500
 8001c40:	50000600 	.word	0x50000600
 8001c44:	50000300 	.word	0x50000300
 8001c48:	50000700 	.word	0x50000700
 8001c4c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d10c      	bne.n	8001c82 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f023 010f 	bic.w	r1, r3, #15
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c80:	e007      	b.n	8001c92 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 020f 	bic.w	r2, r2, #15
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	f023 0303 	bic.w	r3, r3, #3
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ca2:	e007      	b.n	8001cb4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	f043 0210 	orr.w	r2, r3, #16
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd90      	pop	{r4, r7, pc}
 8001cbe:	bf00      	nop

08001cc0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd0:	d004      	beq.n	8001cdc <HAL_ADC_Start+0x1c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a67      	ldr	r2, [pc, #412]	; (8001e74 <HAL_ADC_Start+0x1b4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_Start+0x20>
 8001cdc:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <HAL_ADC_Start+0x1b8>)
 8001cde:	e000      	b.n	8001ce2 <HAL_ADC_Start+0x22>
 8001ce0:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <HAL_ADC_Start+0x1bc>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fd16 	bl	8001714 <LL_ADC_GetMultimode>
 8001ce8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fdf0 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 80b4 	bne.w	8001e64 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_Start+0x4a>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e0af      	b.n	8001e6a <HAL_ADC_Start+0x1aa>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fefc 	bl	8002b10 <ADC_Enable>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 809b 	bne.w	8001e5a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	; (8001e74 <HAL_ADC_Start+0x1b4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d009      	beq.n	8001d56 <HAL_ADC_Start+0x96>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a4e      	ldr	r2, [pc, #312]	; (8001e80 <HAL_ADC_Start+0x1c0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d002      	beq.n	8001d52 <HAL_ADC_Start+0x92>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	e003      	b.n	8001d5a <HAL_ADC_Start+0x9a>
 8001d52:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_ADC_Start+0x1c4>)
 8001d54:	e001      	b.n	8001d5a <HAL_ADC_Start+0x9a>
 8001d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d002      	beq.n	8001d68 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d80:	d106      	bne.n	8001d90 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	f023 0206 	bic.w	r2, r3, #6
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	661a      	str	r2, [r3, #96]	; 0x60
 8001d8e:	e002      	b.n	8001d96 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	221c      	movs	r2, #28
 8001d9c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a32      	ldr	r2, [pc, #200]	; (8001e74 <HAL_ADC_Start+0x1b4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d009      	beq.n	8001dc4 <HAL_ADC_Start+0x104>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a32      	ldr	r2, [pc, #200]	; (8001e80 <HAL_ADC_Start+0x1c0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d002      	beq.n	8001dc0 <HAL_ADC_Start+0x100>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	e003      	b.n	8001dc8 <HAL_ADC_Start+0x108>
 8001dc0:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_ADC_Start+0x1c4>)
 8001dc2:	e001      	b.n	8001dc8 <HAL_ADC_Start+0x108>
 8001dc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d008      	beq.n	8001de2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d002      	beq.n	8001de2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b09      	cmp	r3, #9
 8001de0:	d114      	bne.n	8001e0c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fd3d 	bl	8001884 <LL_ADC_REG_StartConversion>
 8001e0a:	e02d      	b.n	8001e68 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <HAL_ADC_Start+0x1b4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d009      	beq.n	8001e36 <HAL_ADC_Start+0x176>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a16      	ldr	r2, [pc, #88]	; (8001e80 <HAL_ADC_Start+0x1c0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d002      	beq.n	8001e32 <HAL_ADC_Start+0x172>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	e003      	b.n	8001e3a <HAL_ADC_Start+0x17a>
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_ADC_Start+0x1c4>)
 8001e34:	e001      	b.n	8001e3a <HAL_ADC_Start+0x17a>
 8001e36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e3a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00f      	beq.n	8001e68 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e58:	e006      	b.n	8001e68 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001e62:	e001      	b.n	8001e68 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
 8001e66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	50000100 	.word	0x50000100
 8001e78:	50000300 	.word	0x50000300
 8001e7c:	50000700 	.word	0x50000700
 8001e80:	50000500 	.word	0x50000500
 8001e84:	50000400 	.word	0x50000400

08001e88 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Stop+0x16>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e023      	b.n	8001ee6 <HAL_ADC_Stop+0x5e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fd75 	bl	8002998 <ADC_ConversionStop>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 febf 	bl	8002c3c <ADC_Disable>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f02:	d004      	beq.n	8001f0e <HAL_ADC_PollForConversion+0x1e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a77      	ldr	r2, [pc, #476]	; (80020e8 <HAL_ADC_PollForConversion+0x1f8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_PollForConversion+0x22>
 8001f0e:	4b77      	ldr	r3, [pc, #476]	; (80020ec <HAL_ADC_PollForConversion+0x1fc>)
 8001f10:	e000      	b.n	8001f14 <HAL_ADC_PollForConversion+0x24>
 8001f12:	4b77      	ldr	r3, [pc, #476]	; (80020f0 <HAL_ADC_PollForConversion+0x200>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fbfd 	bl	8001714 <LL_ADC_GetMultimode>
 8001f1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d102      	bne.n	8001f2a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f24:	2308      	movs	r3, #8
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	e037      	b.n	8001f9a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d002      	beq.n	8001f3c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d111      	bne.n	8001f60 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	f043 0220 	orr.w	r2, r3, #32
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0c1      	b.n	80020de <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f5e:	e01c      	b.n	8001f9a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f68:	d004      	beq.n	8001f74 <HAL_ADC_PollForConversion+0x84>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5e      	ldr	r2, [pc, #376]	; (80020e8 <HAL_ADC_PollForConversion+0x1f8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_PollForConversion+0x88>
 8001f74:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_ADC_PollForConversion+0x1fc>)
 8001f76:	e000      	b.n	8001f7a <HAL_ADC_PollForConversion+0x8a>
 8001f78:	4b5d      	ldr	r3, [pc, #372]	; (80020f0 <HAL_ADC_PollForConversion+0x200>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fbd8 	bl	8001730 <LL_ADC_GetMultiDMATransfer>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	f043 0220 	orr.w	r2, r3, #32
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0a3      	b.n	80020de <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f96:	2304      	movs	r3, #4
 8001f98:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f9a:	f7ff fa4f 	bl	800143c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fa0:	e021      	b.n	8001fe6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001faa:	f7ff fa47 	bl	800143c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <HAL_ADC_PollForConversion+0xd0>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d112      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	f043 0204 	orr.w	r2, r3, #4
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e07b      	b.n	80020de <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0d6      	beq.n	8001fa2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff faf7 	bl	80015f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01c      	beq.n	800204a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7f5b      	ldrb	r3, [r3, #29]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d118      	bne.n	800204a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b08      	cmp	r3, #8
 8002024:	d111      	bne.n	800204a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <HAL_ADC_PollForConversion+0x1f8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_ADC_PollForConversion+0x178>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_ADC_PollForConversion+0x204>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d002      	beq.n	8002064 <HAL_ADC_PollForConversion+0x174>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	e003      	b.n	800206c <HAL_ADC_PollForConversion+0x17c>
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <HAL_ADC_PollForConversion+0x208>)
 8002066:	e001      	b.n	800206c <HAL_ADC_PollForConversion+0x17c>
 8002068:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	4293      	cmp	r3, r2
 8002072:	d008      	beq.n	8002086 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d002      	beq.n	8002086 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b09      	cmp	r3, #9
 8002084:	d104      	bne.n	8002090 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e014      	b.n	80020ba <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_ADC_PollForConversion+0x1f8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d009      	beq.n	80020ae <HAL_ADC_PollForConversion+0x1be>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <HAL_ADC_PollForConversion+0x204>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d002      	beq.n	80020aa <HAL_ADC_PollForConversion+0x1ba>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	e003      	b.n	80020b2 <HAL_ADC_PollForConversion+0x1c2>
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_ADC_PollForConversion+0x208>)
 80020ac:	e001      	b.n	80020b2 <HAL_ADC_PollForConversion+0x1c2>
 80020ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020b2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d104      	bne.n	80020ca <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2208      	movs	r2, #8
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e008      	b.n	80020dc <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d103      	bne.n	80020dc <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	220c      	movs	r2, #12
 80020da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	50000100 	.word	0x50000100
 80020ec:	50000300 	.word	0x50000300
 80020f0:	50000700 	.word	0x50000700
 80020f4:	50000500 	.word	0x50000500
 80020f8:	50000400 	.word	0x50000400

080020fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0b6      	sub	sp, #216	; 0xd8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002132:	2b01      	cmp	r3, #1
 8002134:	d102      	bne.n	800213c <HAL_ADC_ConfigChannel+0x24>
 8002136:	2302      	movs	r3, #2
 8002138:	f000 bc13 	b.w	8002962 <HAL_ADC_ConfigChannel+0x84a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fbc3 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 83f3 	bne.w	800293c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	f7ff fa5b 	bl	800161e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fbb1 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 8002172:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fbd1 	bl	8001922 <LL_ADC_INJ_IsConversionOngoing>
 8002180:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002184:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 81d9 	bne.w	8002540 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800218e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 81d4 	bne.w	8002540 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021a0:	d10f      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7ff fa62 	bl	8001676 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fa09 	bl	80015d2 <LL_ADC_SetSamplingTimeCommonConfig>
 80021c0:	e00e      	b.n	80021e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f7ff fa51 	bl	8001676 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f9f9 	bl	80015d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	08db      	lsrs	r3, r3, #3
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d022      	beq.n	8002248 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6919      	ldr	r1, [r3, #16]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002212:	f7ff f953 	bl	80014bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6919      	ldr	r1, [r3, #16]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	461a      	mov	r2, r3
 8002224:	f7ff f99f 	bl	8001566 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002234:	2b01      	cmp	r3, #1
 8002236:	d102      	bne.n	800223e <HAL_ADC_ConfigChannel+0x126>
 8002238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223c:	e000      	b.n	8002240 <HAL_ADC_ConfigChannel+0x128>
 800223e:	2300      	movs	r3, #0
 8002240:	461a      	mov	r2, r3
 8002242:	f7ff f9ab 	bl	800159c <LL_ADC_SetOffsetSaturation>
 8002246:	e17b      	b.n	8002540 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f958 	bl	8001504 <LL_ADC_GetOffsetChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10a      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x15c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f94d 	bl	8001504 <LL_ADC_GetOffsetChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	0e9b      	lsrs	r3, r3, #26
 800226e:	f003 021f 	and.w	r2, r3, #31
 8002272:	e01e      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x19a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f942 	bl	8001504 <LL_ADC_GetOffsetChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800229a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80022a2:	2320      	movs	r3, #32
 80022a4:	e004      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80022a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x1b2>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0e9b      	lsrs	r3, r3, #26
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	e018      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1e4>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e004      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80022f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d106      	bne.n	800230e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f911 	bl	8001530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2101      	movs	r1, #1
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f8f5 	bl	8001504 <LL_ADC_GetOffsetChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <HAL_ADC_ConfigChannel+0x222>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f8ea 	bl	8001504 <LL_ADC_GetOffsetChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	0e9b      	lsrs	r3, r3, #26
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	e01e      	b.n	8002378 <HAL_ADC_ConfigChannel+0x260>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2101      	movs	r1, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff f8df 	bl	8001504 <LL_ADC_GetOffsetChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002358:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800235c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e004      	b.n	8002376 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800236c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x278>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	e018      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x2aa>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e004      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80023b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d106      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	2101      	movs	r1, #1
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f8ae 	bl	8001530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f892 	bl	8001504 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x2e8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2102      	movs	r1, #2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff f887 	bl	8001504 <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	f003 021f 	and.w	r2, r3, #31
 80023fe:	e01e      	b.n	800243e <HAL_ADC_ConfigChannel+0x326>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2102      	movs	r1, #2
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f87c 	bl	8001504 <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800241e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e004      	b.n	800243c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002432:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x33e>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	e016      	b.n	8002484 <HAL_ADC_ConfigChannel+0x36c>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002468:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800246a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800246e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e004      	b.n	8002484 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800247a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002484:	429a      	cmp	r2, r3
 8002486:	d106      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2200      	movs	r2, #0
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f84d 	bl	8001530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2103      	movs	r1, #3
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff f831 	bl	8001504 <LL_ADC_GetOffsetChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x3aa>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2103      	movs	r1, #3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f826 	bl	8001504 <LL_ADC_GetOffsetChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	0e9b      	lsrs	r3, r3, #26
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	e017      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x3da>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2103      	movs	r1, #3
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff f81b 	bl	8001504 <LL_ADC_GetOffsetChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024e4:	2320      	movs	r3, #32
 80024e6:	e003      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <HAL_ADC_ConfigChannel+0x3f2>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	0e9b      	lsrs	r3, r3, #26
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	e011      	b.n	800252e <HAL_ADC_ConfigChannel+0x416>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800251a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800251c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002522:	2320      	movs	r3, #32
 8002524:	e003      	b.n	800252e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800252e:	429a      	cmp	r2, r3
 8002530:	d106      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2200      	movs	r2, #0
 8002538:	2103      	movs	r1, #3
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fff8 	bl	8001530 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff f977 	bl	8001838 <LL_ADC_IsEnabled>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 813d 	bne.w	80027cc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6819      	ldr	r1, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	461a      	mov	r2, r3
 8002560:	f7ff f8b4 	bl	80016cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4aa2      	ldr	r2, [pc, #648]	; (80027f4 <HAL_ADC_ConfigChannel+0x6dc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	f040 812e 	bne.w	80027cc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10b      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x480>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	3301      	adds	r3, #1
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2b09      	cmp	r3, #9
 800258e:	bf94      	ite	ls
 8002590:	2301      	movls	r3, #1
 8002592:	2300      	movhi	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e019      	b.n	80025cc <HAL_ADC_ConfigChannel+0x4b4>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e003      	b.n	80025bc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80025b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	bf94      	ite	ls
 80025c6:	2301      	movls	r3, #1
 80025c8:	2300      	movhi	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d079      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x4d4>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0e9b      	lsrs	r3, r3, #26
 80025e2:	3301      	adds	r3, #1
 80025e4:	069b      	lsls	r3, r3, #26
 80025e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ea:	e015      	b.n	8002618 <HAL_ADC_ConfigChannel+0x500>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e003      	b.n	8002610 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3301      	adds	r3, #1
 8002612:	069b      	lsls	r3, r3, #26
 8002614:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x520>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	3301      	adds	r3, #1
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	e017      	b.n	8002668 <HAL_ADC_ConfigChannel+0x550>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002648:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800264a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	ea42 0103 	orr.w	r1, r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <HAL_ADC_ConfigChannel+0x576>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	3301      	adds	r3, #1
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	051b      	lsls	r3, r3, #20
 800268c:	e018      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x5a8>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e003      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80026aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c0:	430b      	orrs	r3, r1
 80026c2:	e07e      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x5c8>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	3301      	adds	r3, #1
 80026d8:	069b      	lsls	r3, r3, #26
 80026da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026de:	e015      	b.n	800270c <HAL_ADC_ConfigChannel+0x5f4>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e003      	b.n	8002704 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	069b      	lsls	r3, r3, #26
 8002708:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_ADC_ConfigChannel+0x614>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	3301      	adds	r3, #1
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	e017      	b.n	800275c <HAL_ADC_ConfigChannel+0x644>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	61fb      	str	r3, [r7, #28]
  return result;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002744:	2320      	movs	r3, #32
 8002746:	e003      	b.n	8002750 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3301      	adds	r3, #1
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	ea42 0103 	orr.w	r1, r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10d      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x670>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	3b1e      	subs	r3, #30
 8002780:	051b      	lsls	r3, r3, #20
 8002782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002786:	e01b      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x6a8>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	613b      	str	r3, [r7, #16]
  return result;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f003 021f 	and.w	r2, r3, #31
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	3b1e      	subs	r3, #30
 80027ba:	051b      	lsls	r3, r3, #20
 80027bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe ff55 	bl	8001676 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_ADC_ConfigChannel+0x6e0>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80be 	beq.w	8002956 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e2:	d004      	beq.n	80027ee <HAL_ADC_ConfigChannel+0x6d6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_ADC_ConfigChannel+0x6e4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10a      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x6ec>
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <HAL_ADC_ConfigChannel+0x6e8>)
 80027f0:	e009      	b.n	8002806 <HAL_ADC_ConfigChannel+0x6ee>
 80027f2:	bf00      	nop
 80027f4:	407f0000 	.word	0x407f0000
 80027f8:	80080000 	.word	0x80080000
 80027fc:	50000100 	.word	0x50000100
 8002800:	50000300 	.word	0x50000300
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <HAL_ADC_ConfigChannel+0x854>)
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fe4a 	bl	80014a0 <LL_ADC_GetCommonPathInternalCh>
 800280c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a56      	ldr	r2, [pc, #344]	; (8002970 <HAL_ADC_ConfigChannel+0x858>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d004      	beq.n	8002824 <HAL_ADC_ConfigChannel+0x70c>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a55      	ldr	r2, [pc, #340]	; (8002974 <HAL_ADC_ConfigChannel+0x85c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d13a      	bne.n	800289a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d134      	bne.n	800289a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002838:	d005      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x72e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a4e      	ldr	r2, [pc, #312]	; (8002978 <HAL_ADC_ConfigChannel+0x860>)
 8002840:	4293      	cmp	r3, r2
 8002842:	f040 8085 	bne.w	8002950 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800284e:	d004      	beq.n	800285a <HAL_ADC_ConfigChannel+0x742>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a49      	ldr	r2, [pc, #292]	; (800297c <HAL_ADC_ConfigChannel+0x864>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_ADC_ConfigChannel+0x746>
 800285a:	4a49      	ldr	r2, [pc, #292]	; (8002980 <HAL_ADC_ConfigChannel+0x868>)
 800285c:	e000      	b.n	8002860 <HAL_ADC_ConfigChannel+0x748>
 800285e:	4a43      	ldr	r2, [pc, #268]	; (800296c <HAL_ADC_ConfigChannel+0x854>)
 8002860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002864:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f7fe fe05 	bl	800147a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002870:	4b44      	ldr	r3, [pc, #272]	; (8002984 <HAL_ADC_ConfigChannel+0x86c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	4a44      	ldr	r2, [pc, #272]	; (8002988 <HAL_ADC_ConfigChannel+0x870>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800288a:	e002      	b.n	8002892 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3b01      	subs	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f9      	bne.n	800288c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002898:	e05a      	b.n	8002950 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a3b      	ldr	r2, [pc, #236]	; (800298c <HAL_ADC_ConfigChannel+0x874>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d125      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d11f      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a31      	ldr	r2, [pc, #196]	; (800297c <HAL_ADC_ConfigChannel+0x864>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d104      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x7ac>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a34      	ldr	r2, [pc, #208]	; (8002990 <HAL_ADC_ConfigChannel+0x878>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d047      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028cc:	d004      	beq.n	80028d8 <HAL_ADC_ConfigChannel+0x7c0>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2a      	ldr	r2, [pc, #168]	; (800297c <HAL_ADC_ConfigChannel+0x864>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x7c4>
 80028d8:	4a29      	ldr	r2, [pc, #164]	; (8002980 <HAL_ADC_ConfigChannel+0x868>)
 80028da:	e000      	b.n	80028de <HAL_ADC_ConfigChannel+0x7c6>
 80028dc:	4a23      	ldr	r2, [pc, #140]	; (800296c <HAL_ADC_ConfigChannel+0x854>)
 80028de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f7fe fdc6 	bl	800147a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ee:	e031      	b.n	8002954 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a27      	ldr	r2, [pc, #156]	; (8002994 <HAL_ADC_ConfigChannel+0x87c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d12d      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d127      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1c      	ldr	r2, [pc, #112]	; (800297c <HAL_ADC_ConfigChannel+0x864>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002918:	d004      	beq.n	8002924 <HAL_ADC_ConfigChannel+0x80c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a17      	ldr	r2, [pc, #92]	; (800297c <HAL_ADC_ConfigChannel+0x864>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x810>
 8002924:	4a16      	ldr	r2, [pc, #88]	; (8002980 <HAL_ADC_ConfigChannel+0x868>)
 8002926:	e000      	b.n	800292a <HAL_ADC_ConfigChannel+0x812>
 8002928:	4a10      	ldr	r2, [pc, #64]	; (800296c <HAL_ADC_ConfigChannel+0x854>)
 800292a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800292e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f7fe fda0 	bl	800147a <LL_ADC_SetCommonPathInternalCh>
 800293a:	e00c      	b.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800294e:	e002      	b.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002950:	bf00      	nop
 8002952:	e000      	b.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002954:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800295e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002962:	4618      	mov	r0, r3
 8002964:	37d8      	adds	r7, #216	; 0xd8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	50000700 	.word	0x50000700
 8002970:	c3210000 	.word	0xc3210000
 8002974:	90c00010 	.word	0x90c00010
 8002978:	50000600 	.word	0x50000600
 800297c:	50000100 	.word	0x50000100
 8002980:	50000300 	.word	0x50000300
 8002984:	20000024 	.word	0x20000024
 8002988:	053e2d63 	.word	0x053e2d63
 800298c:	c7520000 	.word	0xc7520000
 8002990:	50000500 	.word	0x50000500
 8002994:	cb840000 	.word	0xcb840000

08002998 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe ff90 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 80029b4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe ffb1 	bl	8001922 <LL_ADC_INJ_IsConversionOngoing>
 80029c0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8098 	beq.w	8002b00 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02a      	beq.n	8002a34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7f5b      	ldrb	r3, [r3, #29]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d126      	bne.n	8002a34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7f1b      	ldrb	r3, [r3, #28]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d122      	bne.n	8002a34 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029f2:	e014      	b.n	8002a1e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4a45      	ldr	r2, [pc, #276]	; (8002b0c <ADC_ConversionStop+0x174>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d90d      	bls.n	8002a18 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	f043 0210 	orr.w	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e074      	b.n	8002b02 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d1e3      	bne.n	80029f4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d014      	beq.n	8002a64 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe ff48 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe ff05 	bl	800185e <LL_ADC_IsDisableOngoing>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe ff24 	bl	80018ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d014      	beq.n	8002a94 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe ff57 	bl	8001922 <LL_ADC_INJ_IsConversionOngoing>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe feed 	bl	800185e <LL_ADC_IsDisableOngoing>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe ff33 	bl	80018fa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d005      	beq.n	8002aa6 <ADC_ConversionStop+0x10e>
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d105      	bne.n	8002aac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	617b      	str	r3, [r7, #20]
        break;
 8002aa4:	e005      	b.n	8002ab2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	617b      	str	r3, [r7, #20]
        break;
 8002aaa:	e002      	b.n	8002ab2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002aac:	2304      	movs	r3, #4
 8002aae:	617b      	str	r3, [r7, #20]
        break;
 8002ab0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ab2:	f7fe fcc3 	bl	800143c <HAL_GetTick>
 8002ab6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ab8:	e01b      	b.n	8002af2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002aba:	f7fe fcbf 	bl	800143c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d914      	bls.n	8002af2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	f043 0210 	orr.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e007      	b.n	8002b02 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1dc      	bne.n	8002aba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	a33fffff 	.word	0xa33fffff

08002b10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fe89 	bl	8001838 <LL_ADC_IsEnabled>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d176      	bne.n	8002c1a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <ADC_Enable+0x114>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e062      	b.n	8002c1c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fe44 	bl	80017e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b68:	d004      	beq.n	8002b74 <ADC_Enable+0x64>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2e      	ldr	r2, [pc, #184]	; (8002c28 <ADC_Enable+0x118>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <ADC_Enable+0x68>
 8002b74:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <ADC_Enable+0x11c>)
 8002b76:	e000      	b.n	8002b7a <ADC_Enable+0x6a>
 8002b78:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <ADC_Enable+0x120>)
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fc90 	bl	80014a0 <LL_ADC_GetCommonPathInternalCh>
 8002b80:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d013      	beq.n	8002bb2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b8a:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <ADC_Enable+0x124>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	099b      	lsrs	r3, r3, #6
 8002b90:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <ADC_Enable+0x128>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ba4:	e002      	b.n	8002bac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f9      	bne.n	8002ba6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bb2:	f7fe fc43 	bl	800143c <HAL_GetTick>
 8002bb6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bb8:	e028      	b.n	8002c0c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fe3a 	bl	8001838 <LL_ADC_IsEnabled>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d104      	bne.n	8002bd4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fe0a 	bl	80017e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bd4:	f7fe fc32 	bl	800143c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d914      	bls.n	8002c0c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d00d      	beq.n	8002c0c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	f043 0210 	orr.w	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e007      	b.n	8002c1c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d1cf      	bne.n	8002bba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	8000003f 	.word	0x8000003f
 8002c28:	50000100 	.word	0x50000100
 8002c2c:	50000300 	.word	0x50000300
 8002c30:	50000700 	.word	0x50000700
 8002c34:	20000024 	.word	0x20000024
 8002c38:	053e2d63 	.word	0x053e2d63

08002c3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fe08 	bl	800185e <LL_ADC_IsDisableOngoing>
 8002c4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe fdef 	bl	8001838 <LL_ADC_IsEnabled>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d047      	beq.n	8002cf0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d144      	bne.n	8002cf0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030d 	and.w	r3, r3, #13
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10c      	bne.n	8002c8e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe fdc9 	bl	8001810 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2203      	movs	r2, #3
 8002c84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c86:	f7fe fbd9 	bl	800143c <HAL_GetTick>
 8002c8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c8c:	e029      	b.n	8002ce2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	f043 0210 	orr.w	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e023      	b.n	8002cf2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002caa:	f7fe fbc7 	bl	800143c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d914      	bls.n	8002ce2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	f043 0210 	orr.w	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e007      	b.n	8002cf2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1dc      	bne.n	8002caa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <LL_ADC_IsEnabled>:
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <LL_ADC_IsEnabled+0x18>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <LL_ADC_IsEnabled+0x1a>
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_StartCalibration>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_ADC_IsCalibrationOnGoing>:
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d66:	d101      	bne.n	8002d6c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_REG_IsConversionOngoing>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d101      	bne.n	8002d92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_ADCEx_Calibration_Start+0x1c>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e04d      	b.n	8002e58 <HAL_ADCEx_Calibration_Start+0xb8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff39 	bl	8002c3c <ADC_Disable>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d136      	bne.n	8002e42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ddc:	f023 0302 	bic.w	r3, r3, #2
 8002de0:	f043 0202 	orr.w	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6839      	ldr	r1, [r7, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff96 	bl	8002d20 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002df4:	e014      	b.n	8002e20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d90d      	bls.n	8002e20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	f023 0312 	bic.w	r3, r3, #18
 8002e0c:	f043 0210 	orr.w	r2, r3, #16
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e01b      	b.n	8002e58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff94 	bl	8002d52 <LL_ADC_IsCalibrationOnGoing>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e2      	bne.n	8002df6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	f023 0303 	bic.w	r3, r3, #3
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e40:	e005      	b.n	8002e4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	f043 0210 	orr.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	0004de01 	.word	0x0004de01

08002e64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b0a1      	sub	sp, #132	; 0x84
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0e7      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e9a:	d102      	bne.n	8002ea2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	e009      	b.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6e      	ldr	r2, [pc, #440]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d102      	bne.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002eac:	4b6d      	ldr	r3, [pc, #436]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	e001      	b.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	f043 0220 	orr.w	r2, r3, #32
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0be      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff4f 	bl	8002d7a <LL_ADC_REG_IsConversionOngoing>
 8002edc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff49 	bl	8002d7a <LL_ADC_REG_IsConversionOngoing>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 80a0 	bne.w	8003030 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 809c 	bne.w	8003030 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f00:	d004      	beq.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a55      	ldr	r2, [pc, #340]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f0c:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002f0e:	e000      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f10:	4b56      	ldr	r3, [pc, #344]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002f12:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d04b      	beq.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f2e:	035b      	lsls	r3, r3, #13
 8002f30:	430b      	orrs	r3, r1
 8002f32:	431a      	orrs	r2, r3
 8002f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f40:	d004      	beq.n	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a45      	ldr	r2, [pc, #276]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d10f      	bne.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002f4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f50:	f7ff fed3 	bl	8002cfa <LL_ADC_IsEnabled>
 8002f54:	4604      	mov	r4, r0
 8002f56:	4841      	ldr	r0, [pc, #260]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f58:	f7ff fecf 	bl	8002cfa <LL_ADC_IsEnabled>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4323      	orrs	r3, r4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e012      	b.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002f6c:	483c      	ldr	r0, [pc, #240]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f6e:	f7ff fec4 	bl	8002cfa <LL_ADC_IsEnabled>
 8002f72:	4604      	mov	r4, r0
 8002f74:	483b      	ldr	r0, [pc, #236]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f76:	f7ff fec0 	bl	8002cfa <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	431c      	orrs	r4, r3
 8002f7e:	483c      	ldr	r0, [pc, #240]	; (8003070 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002f80:	f7ff febb 	bl	8002cfa <LL_ADC_IsEnabled>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4323      	orrs	r3, r4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d056      	beq.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f9e:	f023 030f 	bic.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	6811      	ldr	r1, [r2, #0]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	6892      	ldr	r2, [r2, #8]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	431a      	orrs	r2, r3
 8002fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb2:	e047      	b.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fbe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a23      	ldr	r2, [pc, #140]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10f      	bne.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002fd4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fd8:	f7ff fe8f 	bl	8002cfa <LL_ADC_IsEnabled>
 8002fdc:	4604      	mov	r4, r0
 8002fde:	481f      	ldr	r0, [pc, #124]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fe0:	f7ff fe8b 	bl	8002cfa <LL_ADC_IsEnabled>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4323      	orrs	r3, r4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e012      	b.n	800301a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ff4:	481a      	ldr	r0, [pc, #104]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ff6:	f7ff fe80 	bl	8002cfa <LL_ADC_IsEnabled>
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	4819      	ldr	r0, [pc, #100]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ffe:	f7ff fe7c 	bl	8002cfa <LL_ADC_IsEnabled>
 8003002:	4603      	mov	r3, r0
 8003004:	431c      	orrs	r4, r3
 8003006:	481a      	ldr	r0, [pc, #104]	; (8003070 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003008:	f7ff fe77 	bl	8002cfa <LL_ADC_IsEnabled>
 800300c:	4603      	mov	r3, r0
 800300e:	4323      	orrs	r3, r4
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d012      	beq.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800301e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003026:	f023 030f 	bic.w	r3, r3, #15
 800302a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800302c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800302e:	e009      	b.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003042:	e000      	b.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003044:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800304e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003052:	4618      	mov	r0, r3
 8003054:	3784      	adds	r7, #132	; 0x84
 8003056:	46bd      	mov	sp, r7
 8003058:	bd90      	pop	{r4, r7, pc}
 800305a:	bf00      	nop
 800305c:	50000100 	.word	0x50000100
 8003060:	50000400 	.word	0x50000400
 8003064:	50000500 	.word	0x50000500
 8003068:	50000300 	.word	0x50000300
 800306c:	50000700 	.word	0x50000700
 8003070:	50000600 	.word	0x50000600

08003074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003090:	4013      	ands	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800309c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a6:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	60d3      	str	r3, [r2, #12]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <__NVIC_GetPriorityGrouping+0x18>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f003 0307 	and.w	r3, r3, #7
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db0b      	blt.n	8003102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4907      	ldr	r1, [pc, #28]	; (8003110 <__NVIC_EnableIRQ+0x38>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2001      	movs	r0, #1
 80030fa:	fa00 f202 	lsl.w	r2, r0, r2
 80030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000e100 	.word	0xe000e100

08003114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db0a      	blt.n	800313e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	490c      	ldr	r1, [pc, #48]	; (8003160 <__NVIC_SetPriority+0x4c>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	440b      	add	r3, r1
 8003138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800313c:	e00a      	b.n	8003154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4908      	ldr	r1, [pc, #32]	; (8003164 <__NVIC_SetPriority+0x50>)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3b04      	subs	r3, #4
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	440b      	add	r3, r1
 8003152:	761a      	strb	r2, [r3, #24]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000e100 	.word	0xe000e100
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f1c3 0307 	rsb	r3, r3, #7
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf28      	it	cs
 8003186:	2304      	movcs	r3, #4
 8003188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3304      	adds	r3, #4
 800318e:	2b06      	cmp	r3, #6
 8003190:	d902      	bls.n	8003198 <NVIC_EncodePriority+0x30>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3b03      	subs	r3, #3
 8003196:	e000      	b.n	800319a <NVIC_EncodePriority+0x32>
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	4313      	orrs	r3, r2
         );
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e0:	d301      	bcc.n	80031e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00f      	b.n	8003206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <SysTick_Config+0x40>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ee:	210f      	movs	r1, #15
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295
 80031f4:	f7ff ff8e 	bl	8003114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <SysTick_Config+0x40>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fe:	4b04      	ldr	r3, [pc, #16]	; (8003210 <SysTick_Config+0x40>)
 8003200:	2207      	movs	r2, #7
 8003202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	e000e010 	.word	0xe000e010

08003214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff29 	bl	8003074 <__NVIC_SetPriorityGrouping>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff40 	bl	80030bc <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff90 	bl	8003168 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5f 	bl	8003114 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff33 	bl	80030d8 <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffa4 	bl	80031d0 <SysTick_Config>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032a2:	e15a      	b.n	800355a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	2101      	movs	r1, #1
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 814c 	beq.w	8003554 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d005      	beq.n	80032d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d130      	bne.n	8003336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	2203      	movs	r2, #3
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800330a:	2201      	movs	r2, #1
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 0201 	and.w	r2, r3, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b03      	cmp	r3, #3
 8003340:	d017      	beq.n	8003372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	2203      	movs	r2, #3
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d123      	bne.n	80033c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	08da      	lsrs	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3208      	adds	r2, #8
 8003386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	08da      	lsrs	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3208      	adds	r2, #8
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	2203      	movs	r2, #3
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80a6 	beq.w	8003554 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003408:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <HAL_GPIO_Init+0x2e4>)
 800340a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340c:	4a5a      	ldr	r2, [pc, #360]	; (8003578 <HAL_GPIO_Init+0x2e4>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6613      	str	r3, [r2, #96]	; 0x60
 8003414:	4b58      	ldr	r3, [pc, #352]	; (8003578 <HAL_GPIO_Init+0x2e4>)
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003420:	4a56      	ldr	r2, [pc, #344]	; (800357c <HAL_GPIO_Init+0x2e8>)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	089b      	lsrs	r3, r3, #2
 8003426:	3302      	adds	r3, #2
 8003428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	220f      	movs	r2, #15
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800344a:	d01f      	beq.n	800348c <HAL_GPIO_Init+0x1f8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_GPIO_Init+0x2ec>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d019      	beq.n	8003488 <HAL_GPIO_Init+0x1f4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a4b      	ldr	r2, [pc, #300]	; (8003584 <HAL_GPIO_Init+0x2f0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_GPIO_Init+0x1f0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a4a      	ldr	r2, [pc, #296]	; (8003588 <HAL_GPIO_Init+0x2f4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00d      	beq.n	8003480 <HAL_GPIO_Init+0x1ec>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a49      	ldr	r2, [pc, #292]	; (800358c <HAL_GPIO_Init+0x2f8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <HAL_GPIO_Init+0x1e8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a48      	ldr	r2, [pc, #288]	; (8003590 <HAL_GPIO_Init+0x2fc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_GPIO_Init+0x1e4>
 8003474:	2305      	movs	r3, #5
 8003476:	e00a      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 8003478:	2306      	movs	r3, #6
 800347a:	e008      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 800347c:	2304      	movs	r3, #4
 800347e:	e006      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 8003480:	2303      	movs	r3, #3
 8003482:	e004      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 8003484:	2302      	movs	r3, #2
 8003486:	e002      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_GPIO_Init+0x1fa>
 800348c:	2300      	movs	r3, #0
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	f002 0203 	and.w	r2, r2, #3
 8003494:	0092      	lsls	r2, r2, #2
 8003496:	4093      	lsls	r3, r2
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800349e:	4937      	ldr	r1, [pc, #220]	; (800357c <HAL_GPIO_Init+0x2e8>)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	3302      	adds	r3, #2
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034ac:	4b39      	ldr	r3, [pc, #228]	; (8003594 <HAL_GPIO_Init+0x300>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034d0:	4a30      	ldr	r2, [pc, #192]	; (8003594 <HAL_GPIO_Init+0x300>)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <HAL_GPIO_Init+0x300>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	43db      	mvns	r3, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034fa:	4a26      	ldr	r2, [pc, #152]	; (8003594 <HAL_GPIO_Init+0x300>)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_GPIO_Init+0x300>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43db      	mvns	r3, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_GPIO_Init+0x300>)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_GPIO_Init+0x300>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	43db      	mvns	r3, r3
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800354e:	4a11      	ldr	r2, [pc, #68]	; (8003594 <HAL_GPIO_Init+0x300>)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3301      	adds	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f ae9d 	bne.w	80032a4 <HAL_GPIO_Init+0x10>
  }
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40021000 	.word	0x40021000
 800357c:	40010000 	.word	0x40010000
 8003580:	48000400 	.word	0x48000400
 8003584:	48000800 	.word	0x48000800
 8003588:	48000c00 	.word	0x48000c00
 800358c:	48001000 	.word	0x48001000
 8003590:	48001400 	.word	0x48001400
 8003594:	40010400 	.word	0x40010400

08003598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	887b      	ldrh	r3, [r7, #2]
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e001      	b.n	80035ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035e4:	e002      	b.n	80035ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035e6:	887a      	ldrh	r2, [r7, #2]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d006      	beq.n	800361c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f806 	bl	8003628 <HAL_GPIO_EXTI_Callback>
  }
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40010400 	.word	0x40010400

08003628 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d141      	bne.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800364e:	4b4b      	ldr	r3, [pc, #300]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365a:	d131      	bne.n	80036c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003662:	4a46      	ldr	r2, [pc, #280]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800366c:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003674:	4a41      	ldr	r2, [pc, #260]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800367c:	4b40      	ldr	r3, [pc, #256]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2232      	movs	r2, #50	; 0x32
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	4a3f      	ldr	r2, [pc, #252]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	0c9b      	lsrs	r3, r3, #18
 800368e:	3301      	adds	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003692:	e002      	b.n	800369a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3b01      	subs	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369a:	4b38      	ldr	r3, [pc, #224]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a6:	d102      	bne.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f2      	bne.n	8003694 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ae:	4b33      	ldr	r3, [pc, #204]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d158      	bne.n	800376e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e057      	b.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c0:	4b2e      	ldr	r3, [pc, #184]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c6:	4a2d      	ldr	r2, [pc, #180]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036d0:	e04d      	b.n	800376e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d8:	d141      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036da:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d131      	bne.n	800374c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ee:	4a23      	ldr	r2, [pc, #140]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003706:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2232      	movs	r2, #50	; 0x32
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	0c9b      	lsrs	r3, r3, #18
 800371a:	3301      	adds	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800371e:	e002      	b.n	8003726 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3b01      	subs	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d102      	bne.n	800373a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f2      	bne.n	8003720 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003746:	d112      	bne.n	800376e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e011      	b.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800375c:	e007      	b.n	800376e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003766:	4a05      	ldr	r2, [pc, #20]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800376c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40007000 	.word	0x40007000
 8003780:	20000024 	.word	0x20000024
 8003784:	431bde83 	.word	0x431bde83

08003788 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003796:	6093      	str	r3, [r2, #8]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40007000 	.word	0x40007000

080037a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e2fe      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d075      	beq.n	80038b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c6:	4b97      	ldr	r3, [pc, #604]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d0:	4b94      	ldr	r3, [pc, #592]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d102      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3e>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d002      	beq.n	80037ec <HAL_RCC_OscConfig+0x44>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4b8d      	ldr	r3, [pc, #564]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05b      	beq.n	80038b0 <HAL_RCC_OscConfig+0x108>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d157      	bne.n	80038b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e2d9      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d106      	bne.n	800381c <HAL_RCC_OscConfig+0x74>
 800380e:	4b85      	ldr	r3, [pc, #532]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a84      	ldr	r2, [pc, #528]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e01d      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x98>
 8003826:	4b7f      	ldr	r3, [pc, #508]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a7e      	ldr	r2, [pc, #504]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b7c      	ldr	r3, [pc, #496]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7b      	ldr	r2, [pc, #492]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 8003840:	4b78      	ldr	r3, [pc, #480]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a77      	ldr	r2, [pc, #476]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a74      	ldr	r2, [pc, #464]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fd fdec 	bl	800143c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fd fde8 	bl	800143c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e29e      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387a:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0xc0>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fd fdd8 	bl	800143c <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003890:	f7fd fdd4 	bl	800143c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e28a      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a2:	4b60      	ldr	r3, [pc, #384]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0xe8>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d075      	beq.n	80039aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038be:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c8:	4b56      	ldr	r3, [pc, #344]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d102      	bne.n	80038de <HAL_RCC_OscConfig+0x136>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d002      	beq.n	80038e4 <HAL_RCC_OscConfig+0x13c>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d11f      	bne.n	8003924 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e4:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_OscConfig+0x154>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e25d      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b49      	ldr	r3, [pc, #292]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	4946      	ldr	r1, [pc, #280]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003910:	4b45      	ldr	r3, [pc, #276]	; (8003a28 <HAL_RCC_OscConfig+0x280>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd fd45 	bl	80013a4 <HAL_InitTick>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d043      	beq.n	80039a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e249      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d023      	beq.n	8003974 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800392c:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3c      	ldr	r2, [pc, #240]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fd fd80 	bl	800143c <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003940:	f7fd fd7c 	bl	800143c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e232      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	061b      	lsls	r3, r3, #24
 800396c:	492d      	ldr	r1, [pc, #180]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
 8003972:	e01a      	b.n	80039aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003974:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800397a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800397e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd fd5c 	bl	800143c <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003988:	f7fd fd58 	bl	800143c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e20e      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800399a:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x1e0>
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d041      	beq.n	8003a3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01c      	beq.n	80039f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039be:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c4:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7fd fd35 	bl	800143c <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fd fd31 	bl	800143c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e1e7      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0ef      	beq.n	80039d6 <HAL_RCC_OscConfig+0x22e>
 80039f6:	e020      	b.n	8003a3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <HAL_RCC_OscConfig+0x27c>)
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fd fd18 	bl	800143c <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a0e:	e00d      	b.n	8003a2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a10:	f7fd fd14 	bl	800143c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d906      	bls.n	8003a2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1ca      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a2c:	4b8c      	ldr	r3, [pc, #560]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1ea      	bne.n	8003a10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80a6 	beq.w	8003b94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a4c:	4b84      	ldr	r3, [pc, #528]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2b4>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x2b6>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	4b7f      	ldr	r3, [pc, #508]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	4a7e      	ldr	r2, [pc, #504]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6e:	4b7c      	ldr	r3, [pc, #496]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a7e:	4b79      	ldr	r3, [pc, #484]	; (8003c64 <HAL_RCC_OscConfig+0x4bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d118      	bne.n	8003abc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a8a:	4b76      	ldr	r3, [pc, #472]	; (8003c64 <HAL_RCC_OscConfig+0x4bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a75      	ldr	r2, [pc, #468]	; (8003c64 <HAL_RCC_OscConfig+0x4bc>)
 8003a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a96:	f7fd fcd1 	bl	800143c <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9e:	f7fd fccd 	bl	800143c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e183      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab0:	4b6c      	ldr	r3, [pc, #432]	; (8003c64 <HAL_RCC_OscConfig+0x4bc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d108      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x32e>
 8003ac4:	4b66      	ldr	r3, [pc, #408]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	4a65      	ldr	r2, [pc, #404]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad4:	e024      	b.n	8003b20 <HAL_RCC_OscConfig+0x378>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b05      	cmp	r3, #5
 8003adc:	d110      	bne.n	8003b00 <HAL_RCC_OscConfig+0x358>
 8003ade:	4b60      	ldr	r3, [pc, #384]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	4a5e      	ldr	r2, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aee:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	4a5a      	ldr	r2, [pc, #360]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003afe:	e00f      	b.n	8003b20 <HAL_RCC_OscConfig+0x378>
 8003b00:	4b57      	ldr	r3, [pc, #348]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	4a56      	ldr	r2, [pc, #344]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b10:	4b53      	ldr	r3, [pc, #332]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	4a52      	ldr	r2, [pc, #328]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d016      	beq.n	8003b56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fd fc88 	bl	800143c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7fd fc84 	bl	800143c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e138      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b46:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ed      	beq.n	8003b30 <HAL_RCC_OscConfig+0x388>
 8003b54:	e015      	b.n	8003b82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7fd fc71 	bl	800143c <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5e:	f7fd fc6d 	bl	800143c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e121      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b74:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ed      	bne.n	8003b5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b82:	7ffb      	ldrb	r3, [r7, #31]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d105      	bne.n	8003b94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	4a34      	ldr	r2, [pc, #208]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d03c      	beq.n	8003c1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01c      	beq.n	8003be2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bae:	4a2c      	ldr	r2, [pc, #176]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fd fc40 	bl	800143c <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bc0:	f7fd fc3c 	bl	800143c <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e0f2      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ef      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x418>
 8003be0:	e01b      	b.n	8003c1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003be2:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf2:	f7fd fc23 	bl	800143c <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bfa:	f7fd fc1f 	bl	800143c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0d5      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1ef      	bne.n	8003bfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80c9 	beq.w	8003db6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 030c 	and.w	r3, r3, #12
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	f000 8083 	beq.w	8003d38 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d15e      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd fbf9 	bl	800143c <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4c:	e00c      	b.n	8003c68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fd fbf5 	bl	800143c <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d905      	bls.n	8003c68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e0ab      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c68:	4b55      	ldr	r3, [pc, #340]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ec      	bne.n	8003c4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c74:	4b52      	ldr	r3, [pc, #328]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	4b52      	ldr	r3, [pc, #328]	; (8003dc4 <HAL_RCC_OscConfig+0x61c>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6a11      	ldr	r1, [r2, #32]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c84:	3a01      	subs	r2, #1
 8003c86:	0112      	lsls	r2, r2, #4
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c8e:	0212      	lsls	r2, r2, #8
 8003c90:	4311      	orrs	r1, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c96:	0852      	lsrs	r2, r2, #1
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0552      	lsls	r2, r2, #21
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ca2:	0852      	lsrs	r2, r2, #1
 8003ca4:	3a01      	subs	r2, #1
 8003ca6:	0652      	lsls	r2, r2, #25
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cae:	06d2      	lsls	r2, r2, #27
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	4943      	ldr	r1, [pc, #268]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb8:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a40      	ldr	r2, [pc, #256]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc4:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a3d      	ldr	r2, [pc, #244]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd fbb4 	bl	800143c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fd fbb0 	bl	800143c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e066      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cea:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x530>
 8003cf6:	e05e      	b.n	8003db6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf8:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a30      	ldr	r2, [pc, #192]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fd fb9a 	bl	800143c <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fd fb96 	bl	800143c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e04c      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1e:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d2a:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	4924      	ldr	r1, [pc, #144]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_OscConfig+0x620>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	60cb      	str	r3, [r1, #12]
 8003d36:	e03e      	b.n	8003db6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e039      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d44:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <HAL_RCC_OscConfig+0x618>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 0203 	and.w	r2, r3, #3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d12c      	bne.n	8003db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	3b01      	subs	r3, #1
 8003d64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d123      	bne.n	8003db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d11b      	bne.n	8003db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d113      	bne.n	8003db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	3b01      	subs	r3, #1
 8003dac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	019f800c 	.word	0x019f800c
 8003dc8:	feeefffc 	.word	0xfeeefffc

08003dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e11e      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de4:	4b91      	ldr	r3, [pc, #580]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d910      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b8e      	ldr	r3, [pc, #568]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 020f 	bic.w	r2, r3, #15
 8003dfa:	498c      	ldr	r1, [pc, #560]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b8a      	ldr	r3, [pc, #552]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e106      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d073      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d129      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e28:	4b81      	ldr	r3, [pc, #516]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0f4      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e38:	f000 f966 	bl	8004108 <RCC_GetSysClockFreqFromPLLSource>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4a7c      	ldr	r2, [pc, #496]	; (8004034 <HAL_RCC_ClockConfig+0x268>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d93f      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e46:	4b7a      	ldr	r3, [pc, #488]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d033      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d12f      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e66:	4b72      	ldr	r3, [pc, #456]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e6e:	4a70      	ldr	r2, [pc, #448]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e024      	b.n	8003ec6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e84:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0c6      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e94:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0be      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ea4:	f000 f8ce 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4a61      	ldr	r2, [pc, #388]	; (8004034 <HAL_RCC_ClockConfig+0x268>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d909      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eb2:	4b5f      	ldr	r3, [pc, #380]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eba:	4a5d      	ldr	r2, [pc, #372]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ec6:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4957      	ldr	r1, [pc, #348]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed8:	f7fd fab0 	bl	800143c <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee0:	f7fd faac 	bl	800143c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e095      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b4e      	ldr	r3, [pc, #312]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 020c 	and.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1eb      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d023      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f20:	4b43      	ldr	r3, [pc, #268]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a42      	ldr	r2, [pc, #264]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f38:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f40:	4a3b      	ldr	r2, [pc, #236]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f48:	4b39      	ldr	r3, [pc, #228]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4936      	ldr	r1, [pc, #216]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b80      	cmp	r3, #128	; 0x80
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f62:	4b33      	ldr	r3, [pc, #204]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	4a32      	ldr	r2, [pc, #200]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6e:	4b2f      	ldr	r3, [pc, #188]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d21d      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7c:	4b2b      	ldr	r3, [pc, #172]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 020f 	bic.w	r2, r3, #15
 8003f84:	4929      	ldr	r1, [pc, #164]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f8c:	f7fd fa56 	bl	800143c <HAL_GetTick>
 8003f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f94:	f7fd fa52 	bl	800143c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e03b      	b.n	8004022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1ed      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4917      	ldr	r1, [pc, #92]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490f      	ldr	r1, [pc, #60]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ff6:	f000 f825 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <HAL_RCC_ClockConfig+0x264>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490c      	ldr	r1, [pc, #48]	; (8004038 <HAL_RCC_ClockConfig+0x26c>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	fa22 f303 	lsr.w	r3, r2, r3
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <HAL_RCC_ClockConfig+0x270>)
 8004014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x274>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd f9c2 	bl	80013a4 <HAL_InitTick>
 8004020:	4603      	mov	r3, r0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40022000 	.word	0x40022000
 8004030:	40021000 	.word	0x40021000
 8004034:	04c4b400 	.word	0x04c4b400
 8004038:	08005c40 	.word	0x08005c40
 800403c:	20000024 	.word	0x20000024
 8004040:	20000028 	.word	0x20000028

08004044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800404a:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b04      	cmp	r3, #4
 8004054:	d102      	bne.n	800405c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004056:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	e047      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b08      	cmp	r3, #8
 8004066:	d102      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004068:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	e03e      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800406e:	4b23      	ldr	r3, [pc, #140]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d136      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	3301      	adds	r3, #1
 8004090:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d10c      	bne.n	80040b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004098:	4a1a      	ldr	r2, [pc, #104]	; (8004104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a0:	4a16      	ldr	r2, [pc, #88]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a2:	68d2      	ldr	r2, [r2, #12]
 80040a4:	0a12      	lsrs	r2, r2, #8
 80040a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	617b      	str	r3, [r7, #20]
      break;
 80040b0:	e00c      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b2:	4a13      	ldr	r2, [pc, #76]	; (8004100 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ba:	4a10      	ldr	r2, [pc, #64]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80040bc:	68d2      	ldr	r2, [r2, #12]
 80040be:	0a12      	lsrs	r2, r2, #8
 80040c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]
      break;
 80040ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	0e5b      	lsrs	r3, r3, #25
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	3301      	adds	r3, #1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	e001      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040ec:	693b      	ldr	r3, [r7, #16]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	00f42400 	.word	0x00f42400
 8004104:	016e3600 	.word	0x016e3600

08004108 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800410e:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d10c      	bne.n	8004146 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800412c:	4a17      	ldr	r2, [pc, #92]	; (800418c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	4a14      	ldr	r2, [pc, #80]	; (8004188 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004136:	68d2      	ldr	r2, [r2, #12]
 8004138:	0a12      	lsrs	r2, r2, #8
 800413a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	617b      	str	r3, [r7, #20]
    break;
 8004144:	e00c      	b.n	8004160 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004146:	4a12      	ldr	r2, [pc, #72]	; (8004190 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004150:	68d2      	ldr	r2, [r2, #12]
 8004152:	0a12      	lsrs	r2, r2, #8
 8004154:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]
    break;
 800415e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	0e5b      	lsrs	r3, r3, #25
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	3301      	adds	r3, #1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800417a:	687b      	ldr	r3, [r7, #4]
}
 800417c:	4618      	mov	r0, r3
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40021000 	.word	0x40021000
 800418c:	016e3600 	.word	0x016e3600
 8004190:	00f42400 	.word	0x00f42400

08004194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800419c:	2300      	movs	r3, #0
 800419e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041a0:	2300      	movs	r3, #0
 80041a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8098 	beq.w	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b6:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10d      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	4b40      	ldr	r3, [pc, #256]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	4a3f      	ldr	r2, [pc, #252]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041cc:	6593      	str	r3, [r2, #88]	; 0x58
 80041ce:	4b3d      	ldr	r3, [pc, #244]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041da:	2301      	movs	r3, #1
 80041dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041de:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a39      	ldr	r2, [pc, #228]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ea:	f7fd f927 	bl	800143c <HAL_GetTick>
 80041ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f0:	e009      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f2:	f7fd f923 	bl	800143c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d902      	bls.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	74fb      	strb	r3, [r7, #19]
        break;
 8004204:	e005      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004206:	4b30      	ldr	r3, [pc, #192]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0ef      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d159      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004218:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01e      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	429a      	cmp	r2, r3
 8004232:	d019      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004234:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004240:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004260:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fd f8e3 	bl	800143c <HAL_GetTick>
 8004276:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004278:	e00b      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fd f8df 	bl	800143c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d902      	bls.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	74fb      	strb	r3, [r7, #19]
            break;
 8004290:	e006      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ec      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	4903      	ldr	r1, [pc, #12]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042bc:	e008      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042be:	7cfb      	ldrb	r3, [r7, #19]
 80042c0:	74bb      	strb	r3, [r7, #18]
 80042c2:	e005      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d0:	7c7b      	ldrb	r3, [r7, #17]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d105      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d6:	4ba7      	ldr	r3, [pc, #668]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	4aa6      	ldr	r2, [pc, #664]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ee:	4ba1      	ldr	r3, [pc, #644]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f023 0203 	bic.w	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	499d      	ldr	r1, [pc, #628]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004310:	4b98      	ldr	r3, [pc, #608]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 020c 	bic.w	r2, r3, #12
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4995      	ldr	r1, [pc, #596]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004332:	4b90      	ldr	r3, [pc, #576]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	498c      	ldr	r1, [pc, #560]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004354:	4b87      	ldr	r3, [pc, #540]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	4984      	ldr	r1, [pc, #528]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004376:	4b7f      	ldr	r3, [pc, #508]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	497b      	ldr	r1, [pc, #492]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004398:	4b76      	ldr	r3, [pc, #472]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	4973      	ldr	r1, [pc, #460]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ba:	4b6e      	ldr	r3, [pc, #440]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	496a      	ldr	r1, [pc, #424]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043dc:	4b65      	ldr	r3, [pc, #404]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	4962      	ldr	r1, [pc, #392]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043fe:	4b5d      	ldr	r3, [pc, #372]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	4959      	ldr	r1, [pc, #356]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004420:	4b54      	ldr	r3, [pc, #336]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	4951      	ldr	r1, [pc, #324]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004442:	4b4c      	ldr	r3, [pc, #304]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	4948      	ldr	r1, [pc, #288]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d015      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004464:	4b43      	ldr	r3, [pc, #268]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4940      	ldr	r1, [pc, #256]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004482:	d105      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004484:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a3a      	ldr	r2, [pc, #232]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800448e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004498:	2b00      	cmp	r3, #0
 800449a:	d015      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	4932      	ldr	r1, [pc, #200]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ba:	d105      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044bc:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044d4:	4b27      	ldr	r3, [pc, #156]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	4924      	ldr	r1, [pc, #144]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f4:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	4916      	ldr	r1, [pc, #88]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800452a:	d105      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a10      	ldr	r2, [pc, #64]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004536:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d019      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	4908      	ldr	r1, [pc, #32]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004562:	d109      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a02      	ldr	r2, [pc, #8]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800456e:	60d3      	str	r3, [r2, #12]
 8004570:	e002      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d015      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004584:	4b29      	ldr	r3, [pc, #164]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	4926      	ldr	r1, [pc, #152]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045a2:	d105      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045a4:	4b21      	ldr	r3, [pc, #132]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a20      	ldr	r2, [pc, #128]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d015      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ca:	4918      	ldr	r1, [pc, #96]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045da:	d105      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045dc:	4b13      	ldr	r3, [pc, #76]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4a12      	ldr	r2, [pc, #72]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d015      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80045f4:	4b0d      	ldr	r3, [pc, #52]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	490a      	ldr	r1, [pc, #40]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004612:	d105      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4a04      	ldr	r2, [pc, #16]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800461e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004620:	7cbb      	ldrb	r3, [r7, #18]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000

08004630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e049      	b.n	80046d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc fd88 	bl	800116c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f000 fd78 	bl	8005164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d001      	beq.n	80046f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e04c      	b.n	8004792 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <HAL_TIM_Base_Start+0xc0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d022      	beq.n	8004750 <HAL_TIM_Base_Start+0x70>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004712:	d01d      	beq.n	8004750 <HAL_TIM_Base_Start+0x70>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a22      	ldr	r2, [pc, #136]	; (80047a4 <HAL_TIM_Base_Start+0xc4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d018      	beq.n	8004750 <HAL_TIM_Base_Start+0x70>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a21      	ldr	r2, [pc, #132]	; (80047a8 <HAL_TIM_Base_Start+0xc8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d013      	beq.n	8004750 <HAL_TIM_Base_Start+0x70>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <HAL_TIM_Base_Start+0xcc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00e      	beq.n	8004750 <HAL_TIM_Base_Start+0x70>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HAL_TIM_Base_Start+0xd0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d009      	beq.n	8004750 <HAL_TIM_Base_Start+0x70>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <HAL_TIM_Base_Start+0xd4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d004      	beq.n	8004750 <HAL_TIM_Base_Start+0x70>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <HAL_TIM_Base_Start+0xd8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d115      	bne.n	800477c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	4b19      	ldr	r3, [pc, #100]	; (80047bc <HAL_TIM_Base_Start+0xdc>)
 8004758:	4013      	ands	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b06      	cmp	r3, #6
 8004760:	d015      	beq.n	800478e <HAL_TIM_Base_Start+0xae>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d011      	beq.n	800478e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	e008      	b.n	800478e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e000      	b.n	8004790 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40000c00 	.word	0x40000c00
 80047b0:	40013400 	.word	0x40013400
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40015000 	.word	0x40015000
 80047bc:	00010007 	.word	0x00010007

080047c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e049      	b.n	8004866 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f841 	bl	800486e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f000 fcb0 	bl	8005164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <HAL_TIM_PWM_Start+0x24>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e03c      	b.n	8004922 <HAL_TIM_PWM_Start+0x9e>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d109      	bne.n	80048c2 <HAL_TIM_PWM_Start+0x3e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e02f      	b.n	8004922 <HAL_TIM_PWM_Start+0x9e>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d109      	bne.n	80048dc <HAL_TIM_PWM_Start+0x58>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e022      	b.n	8004922 <HAL_TIM_PWM_Start+0x9e>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	d109      	bne.n	80048f6 <HAL_TIM_PWM_Start+0x72>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	bf14      	ite	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	2300      	moveq	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	e015      	b.n	8004922 <HAL_TIM_PWM_Start+0x9e>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d109      	bne.n	8004910 <HAL_TIM_PWM_Start+0x8c>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e008      	b.n	8004922 <HAL_TIM_PWM_Start+0x9e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0a6      	b.n	8004a78 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0xb6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004938:	e023      	b.n	8004982 <HAL_TIM_PWM_Start+0xfe>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b04      	cmp	r3, #4
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0xc6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004948:	e01b      	b.n	8004982 <HAL_TIM_PWM_Start+0xfe>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d104      	bne.n	800495a <HAL_TIM_PWM_Start+0xd6>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004958:	e013      	b.n	8004982 <HAL_TIM_PWM_Start+0xfe>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b0c      	cmp	r3, #12
 800495e:	d104      	bne.n	800496a <HAL_TIM_PWM_Start+0xe6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004968:	e00b      	b.n	8004982 <HAL_TIM_PWM_Start+0xfe>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b10      	cmp	r3, #16
 800496e:	d104      	bne.n	800497a <HAL_TIM_PWM_Start+0xf6>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004978:	e003      	b.n	8004982 <HAL_TIM_PWM_Start+0xfe>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2201      	movs	r2, #1
 8004988:	6839      	ldr	r1, [r7, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f001 f864 	bl	8005a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <HAL_TIM_PWM_Start+0x1fc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d018      	beq.n	80049cc <HAL_TIM_PWM_Start+0x148>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a39      	ldr	r2, [pc, #228]	; (8004a84 <HAL_TIM_PWM_Start+0x200>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <HAL_TIM_PWM_Start+0x148>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a37      	ldr	r2, [pc, #220]	; (8004a88 <HAL_TIM_PWM_Start+0x204>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_TIM_PWM_Start+0x148>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a36      	ldr	r2, [pc, #216]	; (8004a8c <HAL_TIM_PWM_Start+0x208>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d009      	beq.n	80049cc <HAL_TIM_PWM_Start+0x148>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a34      	ldr	r2, [pc, #208]	; (8004a90 <HAL_TIM_PWM_Start+0x20c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_PWM_Start+0x148>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a33      	ldr	r2, [pc, #204]	; (8004a94 <HAL_TIM_PWM_Start+0x210>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_PWM_Start+0x14c>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <HAL_TIM_PWM_Start+0x14e>
 80049d0:	2300      	movs	r3, #0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a25      	ldr	r2, [pc, #148]	; (8004a80 <HAL_TIM_PWM_Start+0x1fc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x1b2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f8:	d01d      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x1b2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a26      	ldr	r2, [pc, #152]	; (8004a98 <HAL_TIM_PWM_Start+0x214>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x1b2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a24      	ldr	r2, [pc, #144]	; (8004a9c <HAL_TIM_PWM_Start+0x218>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x1b2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a23      	ldr	r2, [pc, #140]	; (8004aa0 <HAL_TIM_PWM_Start+0x21c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x1b2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <HAL_TIM_PWM_Start+0x200>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x1b2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <HAL_TIM_PWM_Start+0x204>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x1b2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a18      	ldr	r2, [pc, #96]	; (8004a94 <HAL_TIM_PWM_Start+0x210>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d115      	bne.n	8004a62 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <HAL_TIM_PWM_Start+0x220>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b06      	cmp	r3, #6
 8004a46:	d015      	beq.n	8004a74 <HAL_TIM_PWM_Start+0x1f0>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4e:	d011      	beq.n	8004a74 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a60:	e008      	b.n	8004a74 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e000      	b.n	8004a76 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40012c00 	.word	0x40012c00
 8004a84:	40013400 	.word	0x40013400
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800
 8004a94:	40015000 	.word	0x40015000
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800
 8004aa0:	40000c00 	.word	0x40000c00
 8004aa4:	00010007 	.word	0x00010007

08004aa8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e097      	b.n	8004bec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fc fb69 	bl	80011a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004aec:	f023 0307 	bic.w	r3, r3, #7
 8004af0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f000 fb31 	bl	8005164 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b48:	f023 030c 	bic.w	r3, r3, #12
 8004b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	4313      	orrs	r3, r2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	011a      	lsls	r2, r3, #4
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	031b      	lsls	r3, r3, #12
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d110      	bne.n	8004c46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d102      	bne.n	8004c30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c2a:	7b7b      	ldrb	r3, [r7, #13]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d001      	beq.n	8004c34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e069      	b.n	8004d08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c44:	e031      	b.n	8004caa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d110      	bne.n	8004c6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d102      	bne.n	8004c58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c52:	7b3b      	ldrb	r3, [r7, #12]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d001      	beq.n	8004c5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e055      	b.n	8004d08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c6c:	e01d      	b.n	8004caa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d108      	bne.n	8004c86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c74:	7bbb      	ldrb	r3, [r7, #14]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d105      	bne.n	8004c86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c7a:	7b7b      	ldrb	r3, [r7, #13]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d102      	bne.n	8004c86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c80:	7b3b      	ldrb	r3, [r7, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d001      	beq.n	8004c8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e03e      	b.n	8004d08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_TIM_Encoder_Start+0xc4>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d008      	beq.n	8004cc8 <HAL_TIM_Encoder_Start+0xd4>
 8004cb6:	e00f      	b.n	8004cd8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fec9 	bl	8005a58 <TIM_CCxChannelCmd>
      break;
 8004cc6:	e016      	b.n	8004cf6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	2104      	movs	r1, #4
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fec1 	bl	8005a58 <TIM_CCxChannelCmd>
      break;
 8004cd6:	e00e      	b.n	8004cf6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 feb9 	bl	8005a58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	2104      	movs	r1, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 feb2 	bl	8005a58 <TIM_CCxChannelCmd>
      break;
 8004cf4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e0ff      	b.n	8004f2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b14      	cmp	r3, #20
 8004d3a:	f200 80f0 	bhi.w	8004f1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d99 	.word	0x08004d99
 8004d48:	08004f1f 	.word	0x08004f1f
 8004d4c:	08004f1f 	.word	0x08004f1f
 8004d50:	08004f1f 	.word	0x08004f1f
 8004d54:	08004dd9 	.word	0x08004dd9
 8004d58:	08004f1f 	.word	0x08004f1f
 8004d5c:	08004f1f 	.word	0x08004f1f
 8004d60:	08004f1f 	.word	0x08004f1f
 8004d64:	08004e1b 	.word	0x08004e1b
 8004d68:	08004f1f 	.word	0x08004f1f
 8004d6c:	08004f1f 	.word	0x08004f1f
 8004d70:	08004f1f 	.word	0x08004f1f
 8004d74:	08004e5b 	.word	0x08004e5b
 8004d78:	08004f1f 	.word	0x08004f1f
 8004d7c:	08004f1f 	.word	0x08004f1f
 8004d80:	08004f1f 	.word	0x08004f1f
 8004d84:	08004e9d 	.word	0x08004e9d
 8004d88:	08004f1f 	.word	0x08004f1f
 8004d8c:	08004f1f 	.word	0x08004f1f
 8004d90:	08004f1f 	.word	0x08004f1f
 8004d94:	08004edd 	.word	0x08004edd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fa94 	bl	80052cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0208 	orr.w	r2, r2, #8
 8004db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0204 	bic.w	r2, r2, #4
 8004dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6999      	ldr	r1, [r3, #24]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	619a      	str	r2, [r3, #24]
      break;
 8004dd6:	e0a5      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fb0e 	bl	8005400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6999      	ldr	r1, [r3, #24]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	021a      	lsls	r2, r3, #8
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	619a      	str	r2, [r3, #24]
      break;
 8004e18:	e084      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fb81 	bl	8005528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0208 	orr.w	r2, r2, #8
 8004e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0204 	bic.w	r2, r2, #4
 8004e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69d9      	ldr	r1, [r3, #28]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	61da      	str	r2, [r3, #28]
      break;
 8004e58:	e064      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fbf3 	bl	800564c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69d9      	ldr	r1, [r3, #28]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	021a      	lsls	r2, r3, #8
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	61da      	str	r2, [r3, #28]
      break;
 8004e9a:	e043      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fc66 	bl	8005774 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0208 	orr.w	r2, r2, #8
 8004eb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0204 	bic.w	r2, r2, #4
 8004ec6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004eda:	e023      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fcb0 	bl	8005848 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	021a      	lsls	r2, r3, #8
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004f1c:	e002      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
      break;
 8004f22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop

08004f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_ConfigClockSource+0x1c>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e0f6      	b.n	8005142 <HAL_TIM_ConfigClockSource+0x20a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a6f      	ldr	r2, [pc, #444]	; (800514c <HAL_TIM_ConfigClockSource+0x214>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	f000 80c1 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004f94:	4a6d      	ldr	r2, [pc, #436]	; (800514c <HAL_TIM_ConfigClockSource+0x214>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	f200 80c6 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f9c:	4a6c      	ldr	r2, [pc, #432]	; (8005150 <HAL_TIM_ConfigClockSource+0x218>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f000 80b9 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004fa4:	4a6a      	ldr	r2, [pc, #424]	; (8005150 <HAL_TIM_ConfigClockSource+0x218>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	f200 80be 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fac:	4a69      	ldr	r2, [pc, #420]	; (8005154 <HAL_TIM_ConfigClockSource+0x21c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	f000 80b1 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004fb4:	4a67      	ldr	r2, [pc, #412]	; (8005154 <HAL_TIM_ConfigClockSource+0x21c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f200 80b6 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fbc:	4a66      	ldr	r2, [pc, #408]	; (8005158 <HAL_TIM_ConfigClockSource+0x220>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f000 80a9 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004fc4:	4a64      	ldr	r2, [pc, #400]	; (8005158 <HAL_TIM_ConfigClockSource+0x220>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	f200 80ae 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fcc:	4a63      	ldr	r2, [pc, #396]	; (800515c <HAL_TIM_ConfigClockSource+0x224>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	f000 80a1 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004fd4:	4a61      	ldr	r2, [pc, #388]	; (800515c <HAL_TIM_ConfigClockSource+0x224>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	f200 80a6 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fdc:	4a60      	ldr	r2, [pc, #384]	; (8005160 <HAL_TIM_ConfigClockSource+0x228>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	f000 8099 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004fe4:	4a5e      	ldr	r2, [pc, #376]	; (8005160 <HAL_TIM_ConfigClockSource+0x228>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	f200 809e 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ff0:	f000 8091 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004ff4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ff8:	f200 8096 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005000:	f000 8089 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8005004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005008:	f200 808e 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 800500c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005010:	d03e      	beq.n	8005090 <HAL_TIM_ConfigClockSource+0x158>
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005016:	f200 8087 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	f000 8086 	beq.w	800512e <HAL_TIM_ConfigClockSource+0x1f6>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005026:	d87f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005028:	2b70      	cmp	r3, #112	; 0x70
 800502a:	d01a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x12a>
 800502c:	2b70      	cmp	r3, #112	; 0x70
 800502e:	d87b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005030:	2b60      	cmp	r3, #96	; 0x60
 8005032:	d050      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x19e>
 8005034:	2b60      	cmp	r3, #96	; 0x60
 8005036:	d877      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005038:	2b50      	cmp	r3, #80	; 0x50
 800503a:	d03c      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x17e>
 800503c:	2b50      	cmp	r3, #80	; 0x50
 800503e:	d873      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d058      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x1be>
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d86f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005048:	2b30      	cmp	r3, #48	; 0x30
 800504a:	d064      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	d86b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005050:	2b20      	cmp	r3, #32
 8005052:	d060      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d867      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05c      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 800505c:	2b10      	cmp	r3, #16
 800505e:	d05a      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8005060:	e062      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005072:	f000 fcd1 	bl	8005a18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	609a      	str	r2, [r3, #8]
      break;
 800508e:	e04f      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a0:	f000 fcba 	bl	8005a18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050b2:	609a      	str	r2, [r3, #8]
      break;
 80050b4:	e03c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 fc2c 	bl	8005920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2150      	movs	r1, #80	; 0x50
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fc85 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 80050d4:	e02c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 fc4b 	bl	800597e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2160      	movs	r1, #96	; 0x60
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fc75 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 80050f4:	e01c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005102:	461a      	mov	r2, r3
 8005104:	f000 fc0c 	bl	8005920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2140      	movs	r1, #64	; 0x40
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fc65 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 8005114:	e00c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f000 fc5c 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 8005126:	e003      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
      break;
 800512c:	e000      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800512e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	00100070 	.word	0x00100070
 8005150:	00100060 	.word	0x00100060
 8005154:	00100050 	.word	0x00100050
 8005158:	00100040 	.word	0x00100040
 800515c:	00100030 	.word	0x00100030
 8005160:	00100020 	.word	0x00100020

08005164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a4c      	ldr	r2, [pc, #304]	; (80052a8 <TIM_Base_SetConfig+0x144>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d017      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005182:	d013      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a49      	ldr	r2, [pc, #292]	; (80052ac <TIM_Base_SetConfig+0x148>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00f      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a48      	ldr	r2, [pc, #288]	; (80052b0 <TIM_Base_SetConfig+0x14c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00b      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a47      	ldr	r2, [pc, #284]	; (80052b4 <TIM_Base_SetConfig+0x150>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a46      	ldr	r2, [pc, #280]	; (80052b8 <TIM_Base_SetConfig+0x154>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_Base_SetConfig+0x48>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a45      	ldr	r2, [pc, #276]	; (80052bc <TIM_Base_SetConfig+0x158>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a39      	ldr	r2, [pc, #228]	; (80052a8 <TIM_Base_SetConfig+0x144>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d023      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d01f      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a36      	ldr	r2, [pc, #216]	; (80052ac <TIM_Base_SetConfig+0x148>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d01b      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a35      	ldr	r2, [pc, #212]	; (80052b0 <TIM_Base_SetConfig+0x14c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d017      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <TIM_Base_SetConfig+0x150>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a33      	ldr	r2, [pc, #204]	; (80052b8 <TIM_Base_SetConfig+0x154>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00f      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a33      	ldr	r2, [pc, #204]	; (80052c0 <TIM_Base_SetConfig+0x15c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00b      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a32      	ldr	r2, [pc, #200]	; (80052c4 <TIM_Base_SetConfig+0x160>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a31      	ldr	r2, [pc, #196]	; (80052c8 <TIM_Base_SetConfig+0x164>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_Base_SetConfig+0xaa>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2c      	ldr	r2, [pc, #176]	; (80052bc <TIM_Base_SetConfig+0x158>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d108      	bne.n	8005220 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a18      	ldr	r2, [pc, #96]	; (80052a8 <TIM_Base_SetConfig+0x144>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d013      	beq.n	8005274 <TIM_Base_SetConfig+0x110>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a1a      	ldr	r2, [pc, #104]	; (80052b8 <TIM_Base_SetConfig+0x154>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00f      	beq.n	8005274 <TIM_Base_SetConfig+0x110>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <TIM_Base_SetConfig+0x15c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00b      	beq.n	8005274 <TIM_Base_SetConfig+0x110>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <TIM_Base_SetConfig+0x160>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d007      	beq.n	8005274 <TIM_Base_SetConfig+0x110>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <TIM_Base_SetConfig+0x164>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d003      	beq.n	8005274 <TIM_Base_SetConfig+0x110>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <TIM_Base_SetConfig+0x158>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d103      	bne.n	800527c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b01      	cmp	r3, #1
 800528c:	d105      	bne.n	800529a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	611a      	str	r2, [r3, #16]
  }
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40013400 	.word	0x40013400
 80052bc:	40015000 	.word	0x40015000
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800

080052cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f023 0201 	bic.w	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0303 	bic.w	r3, r3, #3
 8005306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f023 0302 	bic.w	r3, r3, #2
 8005318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <TIM_OC1_SetConfig+0x11c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <TIM_OC1_SetConfig+0x88>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <TIM_OC1_SetConfig+0x120>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00f      	beq.n	8005354 <TIM_OC1_SetConfig+0x88>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a2e      	ldr	r2, [pc, #184]	; (80053f0 <TIM_OC1_SetConfig+0x124>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_OC1_SetConfig+0x88>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a2d      	ldr	r2, [pc, #180]	; (80053f4 <TIM_OC1_SetConfig+0x128>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_OC1_SetConfig+0x88>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a2c      	ldr	r2, [pc, #176]	; (80053f8 <TIM_OC1_SetConfig+0x12c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_OC1_SetConfig+0x88>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a2b      	ldr	r2, [pc, #172]	; (80053fc <TIM_OC1_SetConfig+0x130>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10c      	bne.n	800536e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0308 	bic.w	r3, r3, #8
 800535a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f023 0304 	bic.w	r3, r3, #4
 800536c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <TIM_OC1_SetConfig+0x11c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <TIM_OC1_SetConfig+0xd2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <TIM_OC1_SetConfig+0x120>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00f      	beq.n	800539e <TIM_OC1_SetConfig+0xd2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <TIM_OC1_SetConfig+0x124>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00b      	beq.n	800539e <TIM_OC1_SetConfig+0xd2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <TIM_OC1_SetConfig+0x128>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d007      	beq.n	800539e <TIM_OC1_SetConfig+0xd2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a19      	ldr	r2, [pc, #100]	; (80053f8 <TIM_OC1_SetConfig+0x12c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_OC1_SetConfig+0xd2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a18      	ldr	r2, [pc, #96]	; (80053fc <TIM_OC1_SetConfig+0x130>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d111      	bne.n	80053c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40013400 	.word	0x40013400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800
 80053fc:	40015000 	.word	0x40015000

08005400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f023 0210 	bic.w	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0320 	bic.w	r3, r3, #32
 800544e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a2c      	ldr	r2, [pc, #176]	; (8005510 <TIM_OC2_SetConfig+0x110>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d007      	beq.n	8005474 <TIM_OC2_SetConfig+0x74>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a2b      	ldr	r2, [pc, #172]	; (8005514 <TIM_OC2_SetConfig+0x114>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC2_SetConfig+0x74>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a2a      	ldr	r2, [pc, #168]	; (8005518 <TIM_OC2_SetConfig+0x118>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10d      	bne.n	8005490 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800548e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <TIM_OC2_SetConfig+0x110>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <TIM_OC2_SetConfig+0xc0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <TIM_OC2_SetConfig+0x114>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00f      	beq.n	80054c0 <TIM_OC2_SetConfig+0xc0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a1e      	ldr	r2, [pc, #120]	; (800551c <TIM_OC2_SetConfig+0x11c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00b      	beq.n	80054c0 <TIM_OC2_SetConfig+0xc0>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a1d      	ldr	r2, [pc, #116]	; (8005520 <TIM_OC2_SetConfig+0x120>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d007      	beq.n	80054c0 <TIM_OC2_SetConfig+0xc0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <TIM_OC2_SetConfig+0x124>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_OC2_SetConfig+0xc0>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a17      	ldr	r2, [pc, #92]	; (8005518 <TIM_OC2_SetConfig+0x118>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d113      	bne.n	80054e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40015000 	.word	0x40015000
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800

08005528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0303 	bic.w	r3, r3, #3
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2b      	ldr	r2, [pc, #172]	; (8005634 <TIM_OC3_SetConfig+0x10c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_OC3_SetConfig+0x72>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <TIM_OC3_SetConfig+0x110>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_OC3_SetConfig+0x72>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a29      	ldr	r2, [pc, #164]	; (800563c <TIM_OC3_SetConfig+0x114>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10d      	bne.n	80055b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1e      	ldr	r2, [pc, #120]	; (8005634 <TIM_OC3_SetConfig+0x10c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <TIM_OC3_SetConfig+0xbe>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1d      	ldr	r2, [pc, #116]	; (8005638 <TIM_OC3_SetConfig+0x110>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00f      	beq.n	80055e6 <TIM_OC3_SetConfig+0xbe>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1d      	ldr	r2, [pc, #116]	; (8005640 <TIM_OC3_SetConfig+0x118>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <TIM_OC3_SetConfig+0xbe>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1c      	ldr	r2, [pc, #112]	; (8005644 <TIM_OC3_SetConfig+0x11c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d007      	beq.n	80055e6 <TIM_OC3_SetConfig+0xbe>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a1b      	ldr	r2, [pc, #108]	; (8005648 <TIM_OC3_SetConfig+0x120>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_OC3_SetConfig+0xbe>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a16      	ldr	r2, [pc, #88]	; (800563c <TIM_OC3_SetConfig+0x114>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d113      	bne.n	800560e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40013400 	.word	0x40013400
 800563c:	40015000 	.word	0x40015000
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800

0800564c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800569a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	031b      	lsls	r3, r3, #12
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a2c      	ldr	r2, [pc, #176]	; (800575c <TIM_OC4_SetConfig+0x110>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_OC4_SetConfig+0x74>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <TIM_OC4_SetConfig+0x114>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC4_SetConfig+0x74>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a2a      	ldr	r2, [pc, #168]	; (8005764 <TIM_OC4_SetConfig+0x118>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10d      	bne.n	80056dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	031b      	lsls	r3, r3, #12
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a1f      	ldr	r2, [pc, #124]	; (800575c <TIM_OC4_SetConfig+0x110>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <TIM_OC4_SetConfig+0xc0>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <TIM_OC4_SetConfig+0x114>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_OC4_SetConfig+0xc0>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a1e      	ldr	r2, [pc, #120]	; (8005768 <TIM_OC4_SetConfig+0x11c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_OC4_SetConfig+0xc0>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a1d      	ldr	r2, [pc, #116]	; (800576c <TIM_OC4_SetConfig+0x120>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_OC4_SetConfig+0xc0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <TIM_OC4_SetConfig+0x124>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_OC4_SetConfig+0xc0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a17      	ldr	r2, [pc, #92]	; (8005764 <TIM_OC4_SetConfig+0x118>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d113      	bne.n	8005734 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005712:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800571a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	019b      	lsls	r3, r3, #6
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	019b      	lsls	r3, r3, #6
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40013400 	.word	0x40013400
 8005764:	40015000 	.word	0x40015000
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800

08005774 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	041b      	lsls	r3, r3, #16
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <TIM_OC5_SetConfig+0xbc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <TIM_OC5_SetConfig+0x82>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a18      	ldr	r2, [pc, #96]	; (8005834 <TIM_OC5_SetConfig+0xc0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00f      	beq.n	80057f6 <TIM_OC5_SetConfig+0x82>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a17      	ldr	r2, [pc, #92]	; (8005838 <TIM_OC5_SetConfig+0xc4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00b      	beq.n	80057f6 <TIM_OC5_SetConfig+0x82>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a16      	ldr	r2, [pc, #88]	; (800583c <TIM_OC5_SetConfig+0xc8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d007      	beq.n	80057f6 <TIM_OC5_SetConfig+0x82>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a15      	ldr	r2, [pc, #84]	; (8005840 <TIM_OC5_SetConfig+0xcc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d003      	beq.n	80057f6 <TIM_OC5_SetConfig+0x82>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a14      	ldr	r2, [pc, #80]	; (8005844 <TIM_OC5_SetConfig+0xd0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d109      	bne.n	800580a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40013400 	.word	0x40013400
 8005838:	40014000 	.word	0x40014000
 800583c:	40014400 	.word	0x40014400
 8005840:	40014800 	.word	0x40014800
 8005844:	40015000 	.word	0x40015000

08005848 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800588e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	051b      	lsls	r3, r3, #20
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a1a      	ldr	r2, [pc, #104]	; (8005908 <TIM_OC6_SetConfig+0xc0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <TIM_OC6_SetConfig+0x84>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a19      	ldr	r2, [pc, #100]	; (800590c <TIM_OC6_SetConfig+0xc4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00f      	beq.n	80058cc <TIM_OC6_SetConfig+0x84>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a18      	ldr	r2, [pc, #96]	; (8005910 <TIM_OC6_SetConfig+0xc8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <TIM_OC6_SetConfig+0x84>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a17      	ldr	r2, [pc, #92]	; (8005914 <TIM_OC6_SetConfig+0xcc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_OC6_SetConfig+0x84>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a16      	ldr	r2, [pc, #88]	; (8005918 <TIM_OC6_SetConfig+0xd0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_OC6_SetConfig+0x84>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a15      	ldr	r2, [pc, #84]	; (800591c <TIM_OC6_SetConfig+0xd4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d109      	bne.n	80058e0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	029b      	lsls	r3, r3, #10
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800
 800591c:	40015000 	.word	0x40015000

08005920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0201 	bic.w	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800594a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f023 030a 	bic.w	r3, r3, #10
 800595c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800597e:	b480      	push	{r7}
 8005980:	b087      	sub	sp, #28
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 0210 	bic.w	r2, r3, #16
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	031b      	lsls	r3, r3, #12
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	bf00      	nop
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80059f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f043 0307 	orr.w	r3, r3, #7
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	021a      	lsls	r2, r3, #8
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	609a      	str	r2, [r3, #8]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a1a      	ldr	r2, [r3, #32]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1a      	ldr	r2, [r3, #32]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a90:	431a      	orrs	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e074      	b.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a34      	ldr	r2, [pc, #208]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d009      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a33      	ldr	r2, [pc, #204]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d004      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a31      	ldr	r2, [pc, #196]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d108      	bne.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a21      	ldr	r2, [pc, #132]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d01d      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1f      	ldr	r2, [pc, #124]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1d      	ldr	r2, [pc, #116]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10c      	bne.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40015000 	.word	0x40015000
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40014000 	.word	0x40014000

08005bd0 <memset>:
 8005bd0:	4402      	add	r2, r0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d100      	bne.n	8005bda <memset+0xa>
 8005bd8:	4770      	bx	lr
 8005bda:	f803 1b01 	strb.w	r1, [r3], #1
 8005bde:	e7f9      	b.n	8005bd4 <memset+0x4>

08005be0 <__libc_init_array>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	4d0d      	ldr	r5, [pc, #52]	; (8005c18 <__libc_init_array+0x38>)
 8005be4:	4c0d      	ldr	r4, [pc, #52]	; (8005c1c <__libc_init_array+0x3c>)
 8005be6:	1b64      	subs	r4, r4, r5
 8005be8:	10a4      	asrs	r4, r4, #2
 8005bea:	2600      	movs	r6, #0
 8005bec:	42a6      	cmp	r6, r4
 8005bee:	d109      	bne.n	8005c04 <__libc_init_array+0x24>
 8005bf0:	4d0b      	ldr	r5, [pc, #44]	; (8005c20 <__libc_init_array+0x40>)
 8005bf2:	4c0c      	ldr	r4, [pc, #48]	; (8005c24 <__libc_init_array+0x44>)
 8005bf4:	f000 f818 	bl	8005c28 <_init>
 8005bf8:	1b64      	subs	r4, r4, r5
 8005bfa:	10a4      	asrs	r4, r4, #2
 8005bfc:	2600      	movs	r6, #0
 8005bfe:	42a6      	cmp	r6, r4
 8005c00:	d105      	bne.n	8005c0e <__libc_init_array+0x2e>
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c08:	4798      	blx	r3
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	e7ee      	b.n	8005bec <__libc_init_array+0xc>
 8005c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c12:	4798      	blx	r3
 8005c14:	3601      	adds	r6, #1
 8005c16:	e7f2      	b.n	8005bfe <__libc_init_array+0x1e>
 8005c18:	08005c50 	.word	0x08005c50
 8005c1c:	08005c50 	.word	0x08005c50
 8005c20:	08005c50 	.word	0x08005c50
 8005c24:	08005c54 	.word	0x08005c54

08005c28 <_init>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr

08005c34 <_fini>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr
